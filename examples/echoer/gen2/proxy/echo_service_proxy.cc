/***************************************************************
 * Generated by Hottentot CC Generator
 * Date: 08-10-2016 01:21:15
 * Name: echo_service_proxy.cc
 * Description:
 *   This file contains implementation of the proxy class.
 ***************************************************************/

#include <limits>

#include <org/labcrypto/hottentot/runtime/configuration.h>
#include <org/labcrypto/hottentot/runtime/logger.h>
#include <org/labcrypto/hottentot/runtime/utils.h>
// #include <org/labcrypto/hottentot/runtime/request.h>
// #include <org/labcrypto/hottentot/runtime/response.h>
#include <org/labcrypto/hottentot/runtime/protocol_v1.h>
#include <org/labcrypto/hottentot/runtime/proxy/fault.h>
#include <org/labcrypto/hottentot/runtime/proxy/tcp_client.h>
#include <org/labcrypto/hottentot/runtime/proxy/proxy_runtime.h>
// #include <org/labcrypto/hottentot/runtime/proxy/tcp_client_factory.h>
#include <org/labcrypto/hottentot/runtime/proxy/service_connector.h>
#include <org/labcrypto/hottentot/runtime/proxy/service_io.h>
#include <org/labcrypto/hottentot/runtime/proxy/service_connector_factory.h>
#include <org/labcrypto/hottentot/runtime/proxy/service_connect_callback_factory.h>

#include "echo_service_proxy.h" 

#include "../request_message.h"
#include "../response_message.h"


namespace ir {
namespace ntnaeem {
namespace hottentot {
namespace examples {
namespace echoer {
namespace proxy {
  void
  EchoServiceProxy::EchoMessage(
      ::ir::ntnaeem::hottentot::examples::echoer::RequestMessage &req, 
      ::ir::ntnaeem::hottentot::examples::echoer::ResponseMessage &out
  ) {
    /*
     * Make request object
     */
    if (::org::labcrypto::hottentot::runtime::Configuration::Verbose()) {
      ::org::labcrypto::hottentot::runtime::Logger::GetOut() << 
        "[" << ::org::labcrypto::hottentot::runtime::Utils::GetCurrentUTCTimeString() << "]: " <<
          "Making request object ..." << std::endl;
    }
    ::org::labcrypto::hottentot::runtime::RequestV1 *request =
      new ::org::labcrypto::hottentot::runtime::RequestV1;
    request->SetServiceId(3639300462);
    request->SetMethodId(2482416905);
    request->SetType(::org::labcrypto::hottentot::runtime::RequestV1::InvokeStateless);
    /*
     * Serialize arguments
     */
    uint32_t serializedDataLength = 0;
    unsigned char *serializedData = 0;
    /*
     * Serialization of argument 'req'
     */
    serializedDataLength = 0;
    if (::org::labcrypto::hottentot::runtime::Configuration::Verbose()) {
      ::org::labcrypto::hottentot::runtime::Logger::GetOut() << 
        "[" << ::org::labcrypto::hottentot::runtime::Utils::GetCurrentUTCTimeString() << "]: " <<
          "Serializing argument req ..." << std::endl;
    }
    serializedData = req.Serialize(&serializedDataLength);
    if (::org::labcrypto::hottentot::runtime::Configuration::Verbose()) {
      ::org::labcrypto::hottentot::runtime::Logger::GetOut() << 
        "[" << ::org::labcrypto::hottentot::runtime::Utils::GetCurrentUTCTimeString() << "]: " <<
          "req is serialized." << std::endl;
    }
    request->AddArgument(serializedData, serializedDataLength);

    if (::org::labcrypto::hottentot::runtime::Configuration::Verbose()) {
      ::org::labcrypto::hottentot::runtime::Logger::GetOut() << 
        "[" << ::org::labcrypto::hottentot::runtime::Utils::GetCurrentUTCTimeString() << "]: " <<
          "Request object is fill with serialized arguments." << std::endl;
    }
    /*
     * Connect to server
     */
    if (::org::labcrypto::hottentot::runtime::Configuration::Verbose()) {
      ::org::labcrypto::hottentot::runtime::Logger::GetOut() << 
        "[" << ::org::labcrypto::hottentot::runtime::Utils::GetCurrentUTCTimeString() << "]: " <<
          "Connecting to server " << host_ << ":" << port_ << " ..." << std::endl;
    }
    ::org::labcrypto::hottentot::runtime::proxy::ServiceConnector *serviceConnector =
      ::org::labcrypto::hottentot::runtime::proxy::ProxyRuntime::GetServiceConnectorFactory()->
        CreateTcpServiceConnector(host_, port_, NULL);
    ::org::labcrypto::hottentot::runtime::proxy::ServiceConnectCallback *serviceConnectCallback =
      ::org::labcrypto::hottentot::runtime::proxy::ProxyRuntime::GetServiceConnectCallbackFactory()->Create(serviceConnector, request);
    serviceConnector->SetServiceConnectCallback(serviceConnectCallback);
    if (!serviceConnector->Connect()) {
      delete serviceConnector;
      throw std::runtime_error("[" + ::org::labcrypto::hottentot::runtime::Utils::GetCurrentUTCTimeString() + "]: Could not connect.");
    }
    if (::org::labcrypto::hottentot::runtime::Configuration::Verbose()) {
      ::org::labcrypto::hottentot::runtime::Logger::GetOut() << 
        "[" << ::org::labcrypto::hottentot::runtime::Utils::GetCurrentUTCTimeString() << "]: " <<
          "Connect request is sent." << std::endl;
    }
    ::org::labcrypto::hottentot::runtime::ResponseV1 *responseV1 = 
      (::org::labcrypto::hottentot::runtime::ResponseV1 *)
      ::org::labcrypto::hottentot::runtime::proxy::ProxyRuntime::GetResponse(request->GetId());
    if (::org::labcrypto::hottentot::runtime::Configuration::Verbose()) {
      ::org::labcrypto::hottentot::runtime::Utils::PrintArray (
        "Response", 
        responseV1->GetData(), 
        responseV1->GetDataLength()
      );
    }
    out.Deserialize (
      responseV1->GetData(), 
      responseV1->GetDataLength()
    );
  }
} // END OF NAMESPACE proxy
} // END OF NAMESPACE echoer
} // END OF NAMESPACE examples
} // END OF NAMESPACE hottentot
} // END OF NAMESPACE ntnaeem
} // END OF NAMESPACE ir
/******************************************************************
 * Generated by Hottentot JAVA Generator
 * Date: 
 * Name: 
 * Description:
 *   This file contains definition of an abstract service class.
 ******************************************************************/
package ir.ntnaeem.hottentot.examples.echoer;

import org.labcrypto.hottentot.helper.PDTSerializer;
import org.labcrypto.hottentot.helper.PDTDeserializer;
import org.labcrypto.hottentot.helper.ByteArrayToInteger;


public class ResponseMessage {
  private String message = "";
  public void setMessage(String message) {
    this.message = message;
  }
  public String getMessage() {
    return message;
  }
  @Override 
  public String toString() { 
    return "ResponseMessage{" + 
      "message = '" + message + '\'' + 
      "}"; 
  }
	
  public byte[] serialize() {
    byte[] serializedMessage = PDTSerializer.getString(message);
    byte[] output = new byte[serializedMessage.length];
    int counter = 0;
    //use a loop for every property
    for (int i = 0; i < serializedMessage.length; i++) {
      output[counter++] = serializedMessage[i];
    }
    return output;
  }
    
  public void deserialize(byte[] serializedByteArray) {
    if(serializedByteArray.length != 0){
      int counter = 0;
      int dataLength = 0;
      int numbersOfBytesForDataLength;
      //do for every property
    //message : String
    dataLength = 0;
    if (( serializedByteArray[counter] & 0x80) == 0 ) {
      dataLength = serializedByteArray[counter++];
    } else {
      numbersOfBytesForDataLength = serializedByteArray[counter++] & 0x0f;
      byte[] serializedByteArrayLength = new byte[numbersOfBytesForDataLength];
      for (byte i = 0; i < numbersOfBytesForDataLength; i++) {
        serializedByteArrayLength[i] = serializedByteArray[counter++];
      }
      dataLength = ByteArrayToInteger.getInt(serializedByteArrayLength);
    }
    byte[] messageByteArray = new byte[dataLength];
    System.arraycopy(serializedByteArray,counter,messageByteArray,0,dataLength);
    counter += dataLength;
    setMessage(PDTDeserializer.getString(messageByteArray));

    }
  }
}

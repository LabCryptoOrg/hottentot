/******************************************************************
 * Generated by Hottentot JAVA Generator
 * Date: 
 * Name: 
 * Description:
 *   
 ******************************************************************/
package ir.ntnaeem.hottentot.examples.echoer.hotgen;

import java.util.List;

import org.labcrypto.hottentot.*;
import org.labcrypto.hottentot.runtime.Argument;
import org.labcrypto.hottentot.runtime.Proxy;
import org.labcrypto.hottentot.runtime.Request;
import org.labcrypto.hottentot.runtime.Response;
import org.labcrypto.hottentot.runtime.TcpClient;
import org.labcrypto.hottentot.runtime.exception.HottentotRuntimeException;
import org.labcrypto.hottentot.runtime.exception.TcpClientConnectException;
import org.labcrypto.hottentot.runtime.exception.TcpClientReadException;
import org.labcrypto.hottentot.runtime.exception.TcpClientWriteException;
import org.labcrypto.hottentot.runtime.exception.TcpClientCloseException;
import org.labcrypto.hottentot.runtime.factory.ProtocolFactory;
import org.labcrypto.hottentot.runtime.factory.TcpClientFactory;
import org.labcrypto.hottentot.runtime.protocol.Protocol;
import org.labcrypto.hottentot.helper.PDTSerializer;
import org.labcrypto.hottentot.helper.PDTDeserializer;


public class EchoServiceProxy extends AbstractEchoService implements Proxy {
	
  private String host;
  private int port;

  public EchoServiceProxy(String host, int port) {
    this.host = host;
    this.port = port;
  }
  public ResponseMessage echoMessage(RequestMessage req) { 
    //serialize req
    byte[] serializedReq = req.serialize();

    //make request
    Request request = new Request();
    request.setServiceId(3639300462L);
    request.setMethodId(2482416905L);
    request.setArgumentCount((byte) 1);
    request.setType(Request.RequestType.InvokeStateless);
    Argument arg0 = new Argument();
    arg0.setDataLength(serializedReq.length);
    arg0.setData(serializedReq);
    request.addArgument(arg0);
    int dataLength = 0;
    //calculate data length for every argument
    // calulate reqDataLength
    int reqDataLength= serializedReq.length;
    int reqDataLengthByteArrayLength = 1;
    if (reqDataLength >= 0x80) {
      if (reqDataLength <= 0xff) {
        //ex 0x81 0xff
        reqDataLengthByteArrayLength = 2;
      } else if (reqDataLength <= 0xffff) {
        //ex 0x82 0xff 0xff
        reqDataLengthByteArrayLength = 3;
      } else if (reqDataLength <= 0xffffff) {
        //ex 0x83 0xff 0xff 0xff
        reqDataLengthByteArrayLength = 4;
      }
    }
    dataLength += reqDataLength + reqDataLengthByteArrayLength;
    // arg count(1) + request type(1) + method ID(4) + service ID(4) = 10;
    request.setLength(10 + dataLength);
    // connect to server
    TcpClient tcpClient = TcpClientFactory.create();
    try{
      tcpClient.connect(host, port);
    } catch (TcpClientConnectException e) {
      throw new HottentotRuntimeException(e);
    }
    // serialize request according to HTNP
    Protocol protocol = ProtocolFactory.create();
    byte[] serializedRequest = protocol.serializeRequest(request);
    // send request
    try {
      tcpClient.write(serializedRequest);
    } catch (TcpClientWriteException e) {
      throw new HottentotRuntimeException(e);
    }
    // read response from server
    byte[] buffer = new byte[256];
    while (!protocol.isResponseComplete()) {
      byte[] dataChunkRead;
      try {
        dataChunkRead = tcpClient.read();
      } catch (TcpClientReadException e) {
        throw new HottentotRuntimeException(e);
      }
      protocol.processDataForResponse(dataChunkRead);
    }
    Response response = protocol.getResponse();
    // close everything
     try { 
       tcpClient.close(); 
    } catch (TcpClientCloseException e) { 
      e.printStackTrace(); 
    } 
    //deserialize ResponseMessagepart from response
    ResponseMessage responseMessage= null;
    if (response.getStatusCode() == -1) {
      //TODO
    }
    responseMessage= new ResponseMessage();
    responseMessage.deserialize(response.getData());
    return responseMessage;
  }

  public void destroy() {
    //TODO
  }
}

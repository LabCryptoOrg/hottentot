/****************************************************************************
 * Generated by Hottentot CC Generator
 * Date: 06-09-2016 12:38:10
 * Name: echo_service_request_handler.cc
 * Description:
 *   This file contains implementation of service's request handler class.
 ****************************************************************************/
 
#include <string.h>

#include <org/labcrypto/hottentot/runtime/protocol_v1.h>

#include "echo_service_request_handler.h"
#include "abstract_echo_service.h"
#include "echo_service.h"
#include "../request_message.h"
#include "../response_message.h"


namespace ir {
namespace ntnaeem {
namespace hottentot {
namespace examples {
namespace echoer {
namespace service {
  void 
  EchoServiceRequestHandler::HandleRequest (
    ::org::labcrypto::hottentot::runtime::Request &request, 
    ::org::labcrypto::hottentot::runtime::Response &response
  ) {
    ::org::labcrypto::hottentot::runtime::RequestV1 &requestV1 = 
      (::org::labcrypto::hottentot::runtime::RequestV1 &)request;
    ::org::labcrypto::hottentot::runtime::ResponseV1 &responseV1 = 
      (::org::labcrypto::hottentot::runtime::ResponseV1 &)response;
    if (requestV1.GetMethodId() == 2482416905) {
      ::ir::ntnaeem::hottentot::examples::echoer::service::AbstractEchoService *serviceObject = 
        dynamic_cast< ::ir::ntnaeem::hottentot::examples::echoer::service::AbstractEchoService*>(service_);
      /*
       * Deserialization and making input variables
       */
      ::ir::ntnaeem::hottentot::examples::echoer::RequestMessage req;
      req.Deserialize(requestV1.GetArgumentData(0), requestV1.GetArgumentLength(0));
      /*
       * Calling service method
       */
      ::org::labcrypto::hottentot::runtime::service::HotContext hotContext;
      
      ::ir::ntnaeem::hottentot::examples::echoer::ResponseMessage result;
      try {
        serviceObject->EchoMessage(req, result, hotContext);
      } catch (std::exception &e) {
        hotContext.SetFaultyResponse(e.what(), 50);
      } catch (...) {
        hotContext.SetFaultyResponse("Unknown server side exception.", 51);
      }
      /*
       * Serializiation of returned object
       */
      unsigned char *serializedData = 0;
      uint32_t serializedDataLength = 0;
      if (hotContext.GetResponseStatusCode() == 0) {
        serializedData = result.Serialize(&serializedDataLength);
      } else {
        ::org::labcrypto::hottentot::Utf8String faultMessage(hotContext.GetFaultMessage());
        serializedData = faultMessage.Serialize(&serializedDataLength);
      }
      responseV1.SetStatusCode(hotContext.GetResponseStatusCode());
      responseV1.SetData(serializedData);
      responseV1.SetDataLength(serializedDataLength);
      return;
    }
    char errorMessage[] = "Method not found.";
    responseV1.SetStatusCode(1);
    responseV1.SetData((unsigned char*)errorMessage);
    responseV1.SetDataLength(strlen(errorMessage));
  }
} // END OF NAMESPACE service
} // END OF NAMESPACE echoer
} // END OF NAMESPACE examples
} // END OF NAMESPACE hottentot
} // END OF NAMESPACE ntnaeem
} // END OF NAMESPACE ir
/******************************************************************
 * Generated by Hottentot JAVA Generator
 * Date: 
 * Name: 
 * Description:
 *   
 ******************************************************************/
package example.generated.hotgen;

import ir.ntnaeem.hottentot.runtime.Argument;
import ir.ntnaeem.hottentot.runtime.Proxy;
import ir.ntnaeem.hottentot.runtime.Request;
import ir.ntnaeem.hottentot.runtime.Response;
import ir.ntnaeem.hottentot.runtime.TcpClient;
import ir.ntnaeem.hottentot.runtime.exception.HottentotRuntimeException;
import ir.ntnaeem.hottentot.runtime.exception.TcpClientConnectException;
import ir.ntnaeem.hottentot.runtime.exception.TcpClientReadException;
import ir.ntnaeem.hottentot.runtime.exception.TcpClientWriteException;
import ir.ntnaeem.hottentot.runtime.exception.TcpClientCloseException;
import ir.ntnaeem.hottentot.runtime.factory.ProtocolFactory;
import ir.ntnaeem.hottentot.runtime.factory.TcpClientFactory;
import ir.ntnaeem.hottentot.runtime.protocol.Protocol;
import ir.ntnaeem.hottentot.serializerHelper.PDTSerializer;
import ir.ntnaeem.hottentot.serializerHelper.PDTDeserializer;
import ir.ntnaeem.hottentot.type.*;
import java.util.List;

public class SecondServiceProxy extends AbstractSecondService implements Proxy {
	
  private String host;
  private int port;

  public SecondServiceProxy(String host, int port) {
    this.host = host;
    this.port = port;
  }
  public int f() { 

    //make request
    Request request = new Request();
    request.setServiceId(1595637521L);
    request.setMethodId(2392076192L);
    request.setArgumentCount((byte) 0);
    request.setType(Request.RequestType.InvokeStateless);
    int dataLength = 0;
    //calculate data length for every argument
    //arg count(1) + request type(1) + method ID(4) + service ID(4) = 10;
    request.setLength(10 + dataLength);
    //connect to server
    TcpClient tcpClient = TcpClientFactory.create();
    try{
      tcpClient.connect(host, port);
    } catch (TcpClientConnectException e) {
      throw new HottentotRuntimeException(e);
    }
    //serialize request according to HTNP
    Protocol protocol = ProtocolFactory.create();
    byte[] serializedRequest = protocol.serializeRequest(request);
    //send request
    try {
      tcpClient.write(serializedRequest);
    } catch (TcpClientWriteException e) {
      throw new HottentotRuntimeException(e);
    }
    //read response from server
    byte[] buffer = new byte[256];
    while (!protocol.isResponseComplete()) {
      byte[] dataChunkRead;
      try {
        dataChunkRead = tcpClient.read();
      } catch (TcpClientReadException e) {
        throw new HottentotRuntimeException(e);
      }
      protocol.processDataForResponse(dataChunkRead);
    }
    Response response = protocol.getResponse();
    //close everything
     try { 
       tcpClient.close(); 
    } catch (TcpClientCloseException e) { 
      e.printStackTrace(); 
    } 
    //deserialize int32part from response
    if (response.getStatusCode() == -1) {
      //TODO
    }
    _Int32 ret = new _Int32();
    ret.deserialize(response.getData());
    return ret.getValue();
  }

  public void destroy() {
    //TODO
  }
}

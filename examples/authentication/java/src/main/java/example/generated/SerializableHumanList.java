
/******************************************************************
 * Generated by Hottentot JAVA Generator
 * Date: 
 * Name: 
 * Description:
 *   
 ******************************************************************/
package example.generated;

import ir.ntnaeem.hottentot.serializerHelper.DataLengthByteArrayMaker;
import java.nio.ByteBuffer;
import java.util.ArrayList;
import java.util.List;

public class SerializableHumanList {

  private List<Human> humanList;

  public SerializableHumanList() {
    humanList = new ArrayList<Human>();
  }

  public List<Human> getHumanList() {
    return humanList;
  }

  public void setHumanList(List<Human> humanList) {
    this.humanList = humanList;
  }

  public byte[] serialize() {
    if (humanList.size() != 0) {
      int serializedHumanLength = humanList.get(0).serialize().length;
      byte[] humanLengthByteArray = 
      DataLengthByteArrayMaker.getByteArray(serializedHumanLength);
      byte[] serializedHumanList = new byte[humanLengthByteArray.length + serializedHumanLength * humanList.size()];
      System.arraycopy(humanLengthByteArray, 0, serializedHumanList, 0, humanLengthByteArray.length);
      int counter = humanLengthByteArray.length ;
      for (Human human : humanList) {
        byte[] serializedHuman = human.serialize();
        System.arraycopy(serializedHuman, 0, serializedHumanList, counter, serializedHuman.length);
        counter += serializedHuman.length;
      }
      return serializedHumanList;
    }
    return new byte[0];
  }

  public void deserialize(byte[] serializedhumanList) {

    if (serializedhumanList.length != 0) {

      int firstByte = serializedhumanList[0];
      int serializedhumanLength;
      int numOfByteForLength = 1;
      if ((firstByte & 0x80) == 0) {
        serializedhumanLength = serializedhumanList[0];
      } else {
        numOfByteForLength = firstByte & 0x0f;
        byte[] serializedhumanLengthByteArray = new byte[numOfByteForLength];
        for (int i = 1; i <= numOfByteForLength; i++) {
          serializedhumanLengthByteArray[i - 1] = serializedhumanList[i];
        }
        serializedhumanLength = ByteBuffer.wrap(serializedhumanLengthByteArray).getInt();
      }
      //
      int counter = numOfByteForLength;
      byte[] humanByteArray;
      while(true){
        if(counter == serializedhumanList.length){
          break;
        }
        humanByteArray = new byte[serializedhumanLength];
        int humanByteArrayCounter = 0;
        for(int i = counter ; i < counter + serializedhumanLength ; i++){
          humanByteArray[humanByteArrayCounter++] = serializedhumanList[i];
        }
        counter += serializedhumanLength;
        Human human = new Human();
        human.deserialize(humanByteArray);
        humanList.add(human);
      }
    }
  }
}
/******************************************************************
 * Generated by Hottentot JAVA Generator
 * Date: 
 * Name: 
 * Description:
 *   This file contains definition of an abstract service class.
 ******************************************************************/
package naeem.hottentot.examples.auth.hotgen;

import ir.ntnaeem.hottentot.serializerHelper.PDTSerializer;
import ir.ntnaeem.hottentot.serializerHelper.PDTDeserializer;
import ir.ntnaeem.hottentot.serializerHelper.ByteArrayToInteger;

public class User {
  private String name = "";
  private String family = "";
  private byte age;
  public void setName(String name) {
    this.name = name;
  }
  public String getName() {
    return name;
  }
  public void setFamily(String family) {
    this.family = family;
  }
  public String getFamily() {
    return family;
  }
  public void setAge(byte age) {
    this.age = age;
  }
  public byte getAge() {
    return age;
  }
  @Override 
  public String toString() { 
    return "User{" + 
      "name = '" + name + '\'' + 
      ",family = '" + family + '\'' + 
      ",age = '" + age + '\'' + 
      "}"; 
  }
	
  public byte[] serialize() {
    byte[] serializedName = PDTSerializer.getString(name);
    byte[] serializedFamily = PDTSerializer.getString(family);
    byte[] serializedAge = PDTSerializer.getInt8(age);
    byte[] output = new byte[serializedName.length + serializedFamily.length + serializedAge.length];
    int counter = 0;
    //use a loop for every property
    for (int i = 0; i < serializedName.length; i++) {
      output[counter++] = serializedName[i];
    }
    for (int i = 0; i < serializedFamily.length; i++) {
      output[counter++] = serializedFamily[i];
    }
    for (int i = 0; i < serializedAge.length; i++) {
      output[counter++] = serializedAge[i];
    }
    return output;
  }
    
  public void deserialize(byte[] serializedByteArray) {
    if(serializedByteArray.length != 0){
      int counter = 0;
      int dataLength = 0;
      int numbersOfBytesForDataLength;
      //do for every property
    //name : String
    dataLength = 0;
    if(( serializedByteArray[counter] & 0x80) == 0 ) {
      dataLength = serializedByteArray[counter++];
    }else{
      numbersOfBytesForDataLength = serializedByteArray[counter++] & 0x0f;
      byte[] serializedByteArrayLength = new byte[numbersOfBytesForDataLength];
      for(byte i = 0 ; i < numbersOfBytesForDataLength ; i++){
        serializedByteArrayLength[i] = serializedByteArray[counter++];
      }
      dataLength = ByteArrayToInteger.getInt(serializedByteArrayLength);
    }
    byte[] nameByteArray = new byte[dataLength];
    System.arraycopy(serializedByteArray,counter,nameByteArray,0,dataLength);
    counter += dataLength;
    setName(PDTDeserializer.getString(nameByteArray));
    //family : String
    dataLength = 0;
    if(( serializedByteArray[counter] & 0x80) == 0 ) {
      dataLength = serializedByteArray[counter++];
    }else{
      numbersOfBytesForDataLength = serializedByteArray[counter++] & 0x0f;
      byte[] serializedByteArrayLength = new byte[numbersOfBytesForDataLength];
      for(byte i = 0 ; i < numbersOfBytesForDataLength ; i++){
        serializedByteArrayLength[i] = serializedByteArray[counter++];
      }
      dataLength = ByteArrayToInteger.getInt(serializedByteArrayLength);
    }
    byte[] familyByteArray = new byte[dataLength];
    System.arraycopy(serializedByteArray,counter,familyByteArray,0,dataLength);
    counter += dataLength;
    setFamily(PDTDeserializer.getString(familyByteArray));
    //age : byte
    byte[] ageByteArray = new byte[1];
    for(int i = 0 ; i < 1 ; i++){
      ageByteArray[i] = serializedByteArray[counter++];
    }
    setAge(PDTDeserializer.getInt8(ageByteArray));

    }
  }
}

/******************************************************************
 * Generated by Hottentot JAVA Generator
 * Date: 
 * Name: 
 * Description:
 *   
 ******************************************************************/
package naeem.hottentot.examples.auth.hotgen;

import ir.ntnaeem.hottentot.runtime.Argument;
import ir.ntnaeem.hottentot.runtime.Request;
import ir.ntnaeem.hottentot.runtime.RequestHandler;
import ir.ntnaeem.hottentot.runtime.Response;
import ir.ntnaeem.hottentot.runtime.Service;
import ir.ntnaeem.hottentot.runtime.exception.MethodNotSupportException;
import ir.ntnaeem.hottentot.runtime.exception.TcpClientConnectException;
import ir.ntnaeem.hottentot.runtime.exception.TcpClientReadException;
import ir.ntnaeem.hottentot.runtime.exception.TcpClientWriteException;
import ir.ntnaeem.hottentot.serializerHelper.PDTDeserializer;
import ir.ntnaeem.hottentot.serializerHelper.PDTSerializer;
import java.util.List;

public class AuthenticateRequestHandler extends RequestHandler {
  public AuthenticateRequestHandler(Service service) {
    super(service);
  }
  @Override
  public Response handleRequest(Request request) throws TcpClientWriteException, TcpClientReadException, TcpClientConnectException, MethodNotSupportException {
    long methodId = request.getMethodId();
    AuthenticateService authenticateImpl = (AbstractAuthenticateService) service;

    if(methodId == 3526193676L){
      List <Argument> args = request.getArgs();
      Argument arg0 = args.get(0);
      byte[] serializedCredential = arg0.getData();
      Credential credential = new Credential();
      credential.deserialize(serializedCredential);
      Token token = null;
      Response response = new Response();
      token = authenticateImpl.authenticate(credential);
      byte[] serializedToken;
      if(token == null){
        serializedToken  = new byte[0];
      }else{
      serializedToken = token.serialize();
      }
      response.setStatusCode((byte) 0);
      response.setData(serializedToken);
      response.setLength(serializedToken.length + 1);
      return response;
    }
    if(methodId == 2236480184L){
      List <Argument> args = request.getArgs();
      Response response = new Response();
      String result = authenticateImpl.f();
      byte[] serializedResult = PDTSerializer.getString( result );
      response.setStatusCode((byte) 0);
      response.setData(serializedResult);
      response.setLength(serializedResult.length + 1);
      return response;
    }
    if(methodId == 854395736L){
      List <Argument> args = request.getArgs();
      Response response = new Response();
      int result = authenticateImpl.g();
      byte[] serializedResult = PDTSerializer.getInt32( result );
      response.setStatusCode((byte) 0);
      response.setData(serializedResult);
      response.setLength(serializedResult.length + 1);
      return response;
    }
    if(methodId == 1177878616L){
      List <Argument> args = request.getArgs();
      Response response = new Response();
      byte[] result = authenticateImpl.h();
      byte[] serializedResult = PDTSerializer.getData( result );
      response.setStatusCode((byte) 0);
      response.setData(serializedResult);
      response.setLength(serializedResult.length + 1);
      return response;
    }

    throw new MethodNotSupportException("method id is incorrect");
  }
}

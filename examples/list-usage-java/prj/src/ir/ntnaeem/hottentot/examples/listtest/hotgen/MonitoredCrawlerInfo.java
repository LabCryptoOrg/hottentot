/******************************************************************
 * Generated by Hottentot JAVA Generator
 * Date: 
 * Name: 
 * Description:
 *   This file contains definition of an abstract service class.
 ******************************************************************/
package ir.ntnaeem.hottentot.examples.listtest.hotgen;

import ir.ntnaeem.hottentot.serializerHelper.PDTSerializer;
import ir.ntnaeem.hottentot.serializerHelper.PDTDeserializer;
import ir.ntnaeem.hottentot.serializerHelper.ByteArrayToInteger;
import java.util.List;
import java.util.ArrayList;

public class MonitoredCrawlerInfo {
  private byte status;
  private long startTs;
  private List<Statistic> statistics = new ArrayList<Statistic>();
  public void setStatus(byte status) {
    this.status = status;
  }
  public byte getStatus() {
    return status;
  }
  public void setStartTs(long startTs) {
    this.startTs = startTs;
  }
  public long getStartTs() {
    return startTs;
  }
  public void setStatistics(List<Statistic> statistics) {
    this.statistics = statistics;
  }
  public List<Statistic> getStatistics() {
    return statistics;
  }
  @Override 
  public String toString() { 
    return "MonitoredCrawlerInfo{" + 
      "status = '" + status + '\'' + 
      ",startTs = '" + startTs + '\'' + 
      ",statistics = '" + statistics + '\'' + 
      "}"; 
  }
	
  public byte[] serialize() {
    byte[] serializedStatus = PDTSerializer.getInt8(status);
    byte[] serializedStartTs = PDTSerializer.getInt64(startTs);
    SerializableStatisticList serializableStatisticList3 = new SerializableStatisticList();
    serializableStatisticList3.setStatisticList(statistics);
    byte[] serializedStatistics  = serializableStatisticList3.serializeWithLength();
    byte[] output = new byte[serializedStatus.length + serializedStartTs.length + serializedStatistics.length];
    int counter = 0;
    //use a loop for every property
    for (int i = 0; i < serializedStatus.length; i++) {
      output[counter++] = serializedStatus[i];
    }
    for (int i = 0; i < serializedStartTs.length; i++) {
      output[counter++] = serializedStartTs[i];
    }
    for (int i = 0; i < serializedStatistics.length; i++) {
      output[counter++] = serializedStatistics[i];
    }
    return output;
  }
    
  public void deserialize(byte[] serializedByteArray) {
    if(serializedByteArray.length != 0){
      int counter = 0;
      int dataLength = 0;
      int numbersOfBytesForDataLength;
      //do for every property
    //status : byte
    byte[] statusByteArray = new byte[1];
    for(int i = 0 ; i < 1 ; i++){
      statusByteArray[i] = serializedByteArray[counter++];
    }
    setStatus(PDTDeserializer.getInt8(statusByteArray));
    //startTs : long
    byte[] startTsByteArray = new byte[8];
    for(int i = 0 ; i < 8 ; i++){
      startTsByteArray[i] = serializedByteArray[counter++];
    }
    setStartTs(PDTDeserializer.getInt64(startTsByteArray));
    //statistics : List<Statistic>
    dataLength = 0;
    if(( serializedByteArray[counter] & 0x80) == 0 ) {
      dataLength = serializedByteArray[counter++];
    }else{
      numbersOfBytesForDataLength = serializedByteArray[counter++] & 0x0f;
      byte[] serializedByteArrayLength = new byte[numbersOfBytesForDataLength];
      for(byte i = 0 ; i < numbersOfBytesForDataLength ; i++){
        serializedByteArrayLength[i] = serializedByteArray[counter++];
      }
      dataLength = ByteArrayToInteger.getInt(serializedByteArrayLength);
    }
    byte[] statisticsByteArray = new byte[dataLength];
    System.arraycopy(serializedByteArray,counter,statisticsByteArray,0,dataLength);
    counter += dataLength;
    SerializableStatisticList serializableStatisticList1 = new SerializableStatisticList();
    serializableStatisticList1.deserialize(statisticsByteArray);
    setStatistics(serializableStatisticList1.getStatisticList());

    }
  }
}

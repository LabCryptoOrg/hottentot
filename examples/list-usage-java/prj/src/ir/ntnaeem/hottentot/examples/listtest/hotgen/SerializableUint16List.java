/******************************************************************
 * Generated by Hottentot JAVA Generator
 * Date:
 * Name:
 * Description:
 ******************************************************************/
package ir.ntnaeem.hottentot.examples.listtest.hotgen;

import ir.ntnaeem.hottentot.serializerHelper.DataLengthByteArrayMaker;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import ir.ntnaeem.hottentot.serializerHelper.ByteArrayToInteger;
import ir.ntnaeem.hottentot.type.*;

public class SerializableUint16List {

  private List<Short> uint16List;

  public SerializableUint16List() {
    uint16List = new ArrayList<Short>();
  }

  public List<Short> getUint16List() {
    return uint16List;
  }

  public void setUint16List(List<Short> uint16List) {
    this.uint16List = uint16List;
  }

  public byte[] serialize() {
    if (uint16List.size() != 0) {
      int counter = 0;
      int dataLength = 0;
      //calculate serializeduint16ListLength
      for (Short uint16 : uint16List) {
        _Int16 _Int16 = new _Int16( uint16 );
        byte[] serializedUint16 = _Int16.serialize();
        byte[] uint16LengthByteArray =
          DataLengthByteArrayMaker.getByteArray(serializedUint16.length);
        dataLength += uint16LengthByteArray.length + serializedUint16.length;
      }
      byte[] serializedUint16List = new byte[dataLength];
      for (Short uint16 : uint16List) {
        _Int16 _Int16 = new _Int16( uint16 );
        byte[] serializedUint16 = _Int16.serialize();
        int serializedUint16Length = serializedUint16.length;
        byte[] uint16LengthByteArray =
          DataLengthByteArrayMaker.getByteArray(serializedUint16Length);
        System.arraycopy(uint16LengthByteArray, 0, serializedUint16List, counter, uint16LengthByteArray.length);
        counter += uint16LengthByteArray.length;
        System.arraycopy(serializedUint16, 0, serializedUint16List, counter, serializedUint16.length);
        counter += serializedUint16.length;
      }
      return serializedUint16List;
    }
    return new byte[0];
  }

  public byte[] serializeWithLength() {
    byte[] serializedBytes = serialize();
    byte[] dataLengthInBytes = DataLengthByteArrayMaker.getByteArray(serializedBytes.length);
    byte[] output = new byte[serializedBytes.length + dataLengthInBytes.length];
    int c = 0;
    for(int i = 0 ; i < dataLengthInBytes.length ; i++){
      output[c++] = dataLengthInBytes[i];
    }
    for(int i = 0 ; i < serializedBytes.length ; i++){
      output[c++] = serializedBytes[i];
    }
    return output;
  }

  public void deserialize(byte[] serializedUint16List) {
    if(serializedUint16List.length != 0){
      int counter = 0;
      int serializedUint16ByteArrayLength = 0 ;
      while (true) {
        if (counter == serializedUint16List.length) {
          break;
        }
        int firstLengthByte = serializedUint16List[counter];
        int numOfByteForLength = 1;
        if ((firstLengthByte & 0x80) == 0) {
          serializedUint16ByteArrayLength = serializedUint16List[counter];
        } else {
          counter++;
          numOfByteForLength = firstLengthByte & 0x0f;
          byte[] serializedUint16LengthByteArray = new byte[numOfByteForLength];
          int serializedDataWrapperLengthByteArrayCounter = 0;
          for (int i = counter; i < counter + numOfByteForLength; i++) {
            serializedUint16LengthByteArray[serializedDataWrapperLengthByteArrayCounter++] = serializedUint16List[i];
          }
          serializedUint16ByteArrayLength = ByteArrayToInteger.getInt(serializedUint16LengthByteArray);
        }
        counter += numOfByteForLength;
        byte[] uint16ByteArray = new byte[serializedUint16ByteArrayLength];
        int uint16ByteArrayCounter = 0;
        for (int i = counter; i < counter + serializedUint16ByteArrayLength; i++) {
          uint16ByteArray[uint16ByteArrayCounter++] = serializedUint16List[i];
        }
        counter += serializedUint16ByteArrayLength;
        _Int16 _Int16 = new _Int16();
        _Int16.deserialize(uint16ByteArray);
        uint16List.add(_Int16.getValue());
      }
    }
  }
}
/******************************************************************
 * Generated by Hottentot JAVA Generator
 * Date: 
 * Name: 
 * Description:
 *   This file contains definition of an abstract service class.
 ******************************************************************/
package ir.ntnaeem.hottentot.examples.listtest.hotgen;

import ir.ntnaeem.hottentot.serializerHelper.PDTSerializer;
import ir.ntnaeem.hottentot.serializerHelper.PDTDeserializer;
import ir.ntnaeem.hottentot.serializerHelper.ByteArrayToInteger;
import java.util.List;
import java.util.ArrayList;

public class Statistic {
  private String subject = "";
  private String info = "";
  public void setSubject(String subject) {
    this.subject = subject;
  }
  public String getSubject() {
    return subject;
  }
  public void setInfo(String info) {
    this.info = info;
  }
  public String getInfo() {
    return info;
  }
  @Override 
  public String toString() { 
    return "Statistic{" + 
      "subject = '" + subject + '\'' + 
      ",info = '" + info + '\'' + 
      "}"; 
  }
	
  public byte[] serialize() {
    byte[] serializedSubject = PDTSerializer.getString(subject);
    byte[] serializedInfo = PDTSerializer.getString(info);
    byte[] output = new byte[serializedSubject.length + serializedInfo.length];
    int counter = 0;
    //use a loop for every property
    for (int i = 0; i < serializedSubject.length; i++) {
      output[counter++] = serializedSubject[i];
    }
    for (int i = 0; i < serializedInfo.length; i++) {
      output[counter++] = serializedInfo[i];
    }
    return output;
  }
    
  public void deserialize(byte[] serializedByteArray) {
    if(serializedByteArray.length != 0){
      int counter = 0;
      int dataLength = 0;
      int numbersOfBytesForDataLength;
      //do for every property
    //subject : String
    dataLength = 0;
    if(( serializedByteArray[counter] & 0x80) == 0 ) {
      dataLength = serializedByteArray[counter++];
    }else{
      numbersOfBytesForDataLength = serializedByteArray[counter++] & 0x0f;
      byte[] serializedByteArrayLength = new byte[numbersOfBytesForDataLength];
      for(byte i = 0 ; i < numbersOfBytesForDataLength ; i++){
        serializedByteArrayLength[i] = serializedByteArray[counter++];
      }
      dataLength = ByteArrayToInteger.getInt(serializedByteArrayLength);
    }
    byte[] subjectByteArray = new byte[dataLength];
    System.arraycopy(serializedByteArray,counter,subjectByteArray,0,dataLength);
    counter += dataLength;
    setSubject(PDTDeserializer.getString(subjectByteArray));
    //info : String
    dataLength = 0;
    if(( serializedByteArray[counter] & 0x80) == 0 ) {
      dataLength = serializedByteArray[counter++];
    }else{
      numbersOfBytesForDataLength = serializedByteArray[counter++] & 0x0f;
      byte[] serializedByteArrayLength = new byte[numbersOfBytesForDataLength];
      for(byte i = 0 ; i < numbersOfBytesForDataLength ; i++){
        serializedByteArrayLength[i] = serializedByteArray[counter++];
      }
      dataLength = ByteArrayToInteger.getInt(serializedByteArrayLength);
    }
    byte[] infoByteArray = new byte[dataLength];
    System.arraycopy(serializedByteArray,counter,infoByteArray,0,dataLength);
    counter += dataLength;
    setInfo(PDTDeserializer.getString(infoByteArray));

    }
  }
}

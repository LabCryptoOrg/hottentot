/******************************************************************
 * Generated by Hottentot JAVA Generator
 * Date:
 * Name:
 * Description:
 ******************************************************************/
package ir.ntnaeem.hottentot.examples.listtest.hotgen;

import ir.ntnaeem.hottentot.serializerHelper.DataLengthByteArrayMaker;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import ir.ntnaeem.hottentot.serializerHelper.ByteArrayToInteger;
import ir.ntnaeem.hottentot.type.*;

public class SerializableReportEntryList {

  private List<ReportEntry> reportEntryList;

  public SerializableReportEntryList() {
    reportEntryList = new ArrayList<ReportEntry>();
  }

  public List<ReportEntry> getReportEntryList() {
    return reportEntryList;
  }

  public void setReportEntryList(List<ReportEntry> reportEntryList) {
    this.reportEntryList = reportEntryList;
  }

  public byte[] serialize() {
    if (reportEntryList.size() != 0) {
      int counter = 0;
      int dataLength = 0;
      //calculate serializedReportEntryListLength
      for (ReportEntry reportEntry : reportEntryList) {
        
        byte[] serializedReportEntry = reportEntry.serialize();
        byte[] reportEntryLengthByteArray =
          DataLengthByteArrayMaker.getByteArray(serializedReportEntry.length);
        dataLength += reportEntryLengthByteArray.length + serializedReportEntry.length;
      }
      byte[] serializedReportEntryList = new byte[dataLength];
      for (ReportEntry reportEntry : reportEntryList) {
        
        byte[] serializedReportEntry = reportEntry.serialize();
        int serializedReportEntryLength = serializedReportEntry.length;
        byte[] reportEntryLengthByteArray =
          DataLengthByteArrayMaker.getByteArray(serializedReportEntryLength);
        System.arraycopy(reportEntryLengthByteArray, 0, serializedReportEntryList, counter, reportEntryLengthByteArray.length);
        counter += reportEntryLengthByteArray.length;
        System.arraycopy(serializedReportEntry, 0, serializedReportEntryList, counter, serializedReportEntry.length);
        counter += serializedReportEntry.length;
      }
      return serializedReportEntryList;
    }
    return new byte[0];
  }

  public byte[] serializeWithLength() {
    byte[] serializedBytes = serialize();
    byte[] dataLengthInBytes = DataLengthByteArrayMaker.getByteArray(serializedBytes.length);
    byte[] output = new byte[serializedBytes.length + dataLengthInBytes.length];
    int c = 0;
    for(int i = 0 ; i < dataLengthInBytes.length ; i++){
      output[c++] = dataLengthInBytes[i];
    }
    for(int i = 0 ; i < serializedBytes.length ; i++){
      output[c++] = serializedBytes[i];
    }
    return output;
  }

  public void deserialize(byte[] serializedReportEntryList) {
    if(serializedReportEntryList.length != 0){
      int counter = 0;
      int serializedReportEntryByteArrayLength = 0 ;
      while (true) {
        if (counter == serializedReportEntryList.length) {
          break;
        }
        int firstLengthByte = serializedReportEntryList[counter];
        int numOfByteForLength = 1;
        if ((firstLengthByte & 0x80) == 0) {
          serializedReportEntryByteArrayLength = serializedReportEntryList[counter];
        } else {
          counter++;
          numOfByteForLength = firstLengthByte & 0x0f;
          byte[] serializedReportEntryLengthByteArray = new byte[numOfByteForLength];
          int serializedDataWrapperLengthByteArrayCounter = 0;
          for (int i = counter; i < counter + numOfByteForLength; i++) {
            serializedReportEntryLengthByteArray[serializedDataWrapperLengthByteArrayCounter++] = serializedReportEntryList[i];
          }
          serializedReportEntryByteArrayLength = ByteArrayToInteger.getInt(serializedReportEntryLengthByteArray);
        }
        counter += numOfByteForLength;
        byte[] reportEntryByteArray = new byte[serializedReportEntryByteArrayLength];
        int reportEntryByteArrayCounter = 0;
        for (int i = counter; i < counter + serializedReportEntryByteArrayLength; i++) {
          reportEntryByteArray[reportEntryByteArrayCounter++] = serializedReportEntryList[i];
        }
        counter += serializedReportEntryByteArrayLength;
        ReportEntry reportEntry = new ReportEntry();
        reportEntry.deserialize(reportEntryByteArray);
        reportEntryList.add(reportEntry);
      }
    }
  }
}
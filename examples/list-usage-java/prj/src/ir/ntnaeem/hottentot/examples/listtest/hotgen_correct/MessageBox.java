/******************************************************************
 * Generated by Hottentot JAVA Generator
 * Date:
 * Name:
 * Description:
 * This file contains definition of an abstract service class.
 ******************************************************************/
package ir.ntnaeem.hottentot.examples.listtest.hotgen_correct;

import ir.ntnaeem.hottentot.serializerHelper.PDTSerializer;
import ir.ntnaeem.hottentot.serializerHelper.PDTDeserializer;
import ir.ntnaeem.hottentot.serializerHelper.ByteArrayToInteger;

import java.util.Arrays;
import java.util.List;

public class MessageBox {
  private String value = "";
  //CHANGE
  private List<String> messages;

  public void setValue(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  public void setMessages(List<String> messages) {
    this.messages = messages;
  }

  public List<String> getMessages() {
    return messages;
  }

  @Override
  public String toString() {
    return "MessageBox{" +
      "value = '" + value + '\'' +
      ",messages = '" + messages + '\'' +
      "}";
  }

  public byte[] serialize() {
    byte[] serializedValue = PDTSerializer.getString(value);

    //CHANGE
    SerializableStringList serializableStringList = new SerializableStringList();
    serializableStringList.setStringList(messages);
    byte[] serializedMessages = serializableStringList.serializeWithLength();
    System.out.println("serialized messages : ");
    System.out.println(Arrays.toString(serializedMessages));
    //
    byte[] output = new byte[serializedValue.length + serializedMessages.length];
    int counter = 0;
    //use a loop for every property
    for (int i = 0; i < serializedValue.length; i++) {
      output[counter++] = serializedValue[i];
    }
    for (int i = 0; i < serializedMessages.length; i++) {
      output[counter++] = serializedMessages[i];
    }
    System.out.println("serialized :");
    System.out.println(Arrays.toString(output));
    return output;
  }

  public void deserialize(byte[] serializedByteArray) {
    if (serializedByteArray.length != 0) {
      int counter = 0;
      int dataLength = 0;
      int numbersOfBytesForDataLength;
      //do for every property
      //value : String
      dataLength = 0;
      if ((serializedByteArray[counter] & 0x80) == 0) {
        dataLength = serializedByteArray[counter++];
      } else {
        numbersOfBytesForDataLength = serializedByteArray[counter++] & 0x0f;
        byte[] serializedByteArrayLength = new byte[numbersOfBytesForDataLength];
        for (byte i = 0; i < numbersOfBytesForDataLength; i++) {
          serializedByteArrayLength[i] = serializedByteArray[counter++];
        }
        dataLength = ByteArrayToInteger.getInt(serializedByteArrayLength);
      }
      byte[] valueByteArray = new byte[dataLength];
      System.arraycopy(serializedByteArray, counter, valueByteArray, 0, dataLength);
      counter += dataLength;
      setValue(PDTDeserializer.getString(valueByteArray));
      //CHANGED
      //messages : list<string>
      dataLength = 0;
      if ((serializedByteArray[counter] & 0x80) == 0) {
        dataLength = serializedByteArray[counter++];
      } else {
        numbersOfBytesForDataLength = serializedByteArray[counter++] & 0x0f;
        byte[] serializedByteArrayLength = new byte[numbersOfBytesForDataLength];
        for (byte i = 0; i < numbersOfBytesForDataLength; i++) {
          serializedByteArrayLength[i] = serializedByteArray[counter++];
        }
        dataLength = ByteArrayToInteger.getInt(serializedByteArrayLength);
      }
      byte[] messagesByteArray = new byte[dataLength];
      System.arraycopy(serializedByteArray, counter, messagesByteArray, 0, dataLength);
      counter += dataLength;
      SerializableStringList serializableStringList = new SerializableStringList();
      serializableStringList.deserialize(messagesByteArray);
      setMessages(serializableStringList.getStringList());
    }
  }
}

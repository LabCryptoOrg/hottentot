/******************************************************************
 * Generated by Hottentot JAVA Generator
 * Date:
 * Name:
 * Description:
 ******************************************************************/
package ir.ntnaeem.hottentot.examples.listtest.hotgen;

import ir.ntnaeem.hottentot.serializerHelper.DataLengthByteArrayMaker;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import ir.ntnaeem.hottentot.serializerHelper.ByteArrayToInteger;
import ir.ntnaeem.hottentot.type.*;

public class SerializableStatisticList {

  private List<Statistic> statisticList;

  public SerializableStatisticList() {
    statisticList = new ArrayList<Statistic>();
  }

  public List<Statistic> getStatisticList() {
    return statisticList;
  }

  public void setStatisticList(List<Statistic> statisticList) {
    this.statisticList = statisticList;
  }

  public byte[] serialize() {
    if (statisticList.size() != 0) {
      int counter = 0;
      int dataLength = 0;
      //calculate serializedStatisticListLength
      for (Statistic statistic : statisticList) {
        
        byte[] serializedStatistic = statistic.serialize();
        byte[] statisticLengthByteArray =
          DataLengthByteArrayMaker.getByteArray(serializedStatistic.length);
        dataLength += statisticLengthByteArray.length + serializedStatistic.length;
      }
      byte[] serializedStatisticList = new byte[dataLength];
      for (Statistic statistic : statisticList) {
        
        byte[] serializedStatistic = statistic.serialize();
        int serializedStatisticLength = serializedStatistic.length;
        byte[] statisticLengthByteArray =
          DataLengthByteArrayMaker.getByteArray(serializedStatisticLength);
        System.arraycopy(statisticLengthByteArray, 0, serializedStatisticList, counter, statisticLengthByteArray.length);
        counter += statisticLengthByteArray.length;
        System.arraycopy(serializedStatistic, 0, serializedStatisticList, counter, serializedStatistic.length);
        counter += serializedStatistic.length;
      }
      return serializedStatisticList;
    }
    return new byte[0];
  }

  public byte[] serializeWithLength() {
    byte[] serializedBytes = serialize();
    byte[] dataLengthInBytes = DataLengthByteArrayMaker.getByteArray(serializedBytes.length);
    byte[] output = new byte[serializedBytes.length + dataLengthInBytes.length];
    int c = 0;
    for(int i = 0 ; i < dataLengthInBytes.length ; i++){
      output[c++] = dataLengthInBytes[i];
    }
    for(int i = 0 ; i < serializedBytes.length ; i++){
      output[c++] = serializedBytes[i];
    }
    return output;
  }

  public void deserialize(byte[] serializedStatisticList) {
    if(serializedStatisticList.length != 0){
      int counter = 0;
      int serializedStatisticByteArrayLength = 0 ;
      while (true) {
        if (counter == serializedStatisticList.length) {
          break;
        }
        int firstLengthByte = serializedStatisticList[counter];
        int numOfByteForLength = 1;
        if ((firstLengthByte & 0x80) == 0) {
          serializedStatisticByteArrayLength = serializedStatisticList[counter];
        } else {
          counter++;
          numOfByteForLength = firstLengthByte & 0x0f;
          byte[] serializedStatisticLengthByteArray = new byte[numOfByteForLength];
          int serializedDataWrapperLengthByteArrayCounter = 0;
          for (int i = counter; i < counter + numOfByteForLength; i++) {
            serializedStatisticLengthByteArray[serializedDataWrapperLengthByteArrayCounter++] = serializedStatisticList[i];
          }
          serializedStatisticByteArrayLength = ByteArrayToInteger.getInt(serializedStatisticLengthByteArray);
        }
        counter += numOfByteForLength;
        byte[] statisticByteArray = new byte[serializedStatisticByteArrayLength];
        int statisticByteArrayCounter = 0;
        for (int i = counter; i < counter + serializedStatisticByteArrayLength; i++) {
          statisticByteArray[statisticByteArrayCounter++] = serializedStatisticList[i];
        }
        counter += serializedStatisticByteArrayLength;
        Statistic statistic = new Statistic();
        statistic.deserialize(statisticByteArray);
        statisticList.add(statistic);
      }
    }
  }
}
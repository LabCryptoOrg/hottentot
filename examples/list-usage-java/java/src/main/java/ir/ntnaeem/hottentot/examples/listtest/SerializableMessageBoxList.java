/******************************************************************
 * Generated by Hottentot JAVA Generator
 * Date:
 * Name:
 * Description:
 ******************************************************************/
package ir.ntnaeem.hottentot.examples.listtest;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import org.labcrypto.hottentot.*;
import org.labcrypto.hottentot.helper.DataLengthByteArrayMaker;
import org.labcrypto.hottentot.helper.ByteArrayToInteger;


public class SerializableMessageBoxList {

  private List<MessageBox> messageBoxList;

  public SerializableMessageBoxList() {
    messageBoxList = new ArrayList<MessageBox>();
  }

  public List<MessageBox> getMessageBoxList() {
    return messageBoxList;
  }

  public void setMessageBoxList(List<MessageBox> messageBoxList) {
    this.messageBoxList = messageBoxList;
  }

  public byte[] serialize() {
    if (messageBoxList.size() != 0) {
      int counter = 0;
      int dataLength = 0;
      //calculate serializedMessageBoxListLength
      for (MessageBox messageBox : messageBoxList) {
        
        byte[] serializedMessageBox = messageBox.serialize();
        byte[] messageBoxLengthByteArray =
          DataLengthByteArrayMaker.getByteArray(serializedMessageBox.length);
        dataLength += messageBoxLengthByteArray.length + serializedMessageBox.length;
      }
      byte[] serializedMessageBoxList = new byte[dataLength];
      for (MessageBox messageBox : messageBoxList) {
        
        byte[] serializedMessageBox = messageBox.serialize();
        int serializedMessageBoxLength = serializedMessageBox.length;
        byte[] messageBoxLengthByteArray =
          DataLengthByteArrayMaker.getByteArray(serializedMessageBoxLength);
        System.arraycopy(messageBoxLengthByteArray, 0, serializedMessageBoxList, counter, messageBoxLengthByteArray.length);
        counter += messageBoxLengthByteArray.length;
        System.arraycopy(serializedMessageBox, 0, serializedMessageBoxList, counter, serializedMessageBox.length);
        counter += serializedMessageBox.length;
      }
      return serializedMessageBoxList;
    }
    return new byte[0];
  }

  public byte[] serializeWithLength() {
    byte[] serializedBytes = serialize();
    byte[] dataLengthInBytes = DataLengthByteArrayMaker.getByteArray(serializedBytes.length);
    byte[] output = new byte[serializedBytes.length + dataLengthInBytes.length];
    int c = 0;
    for(int i = 0 ; i < dataLengthInBytes.length ; i++){
      output[c++] = dataLengthInBytes[i];
    }
    for(int i = 0 ; i < serializedBytes.length ; i++){
      output[c++] = serializedBytes[i];
    }
    return output;
  }

  public void deserialize(byte[] serializedMessageBoxList) {
    if(serializedMessageBoxList.length != 0){
      int counter = 0;
      int serializedMessageBoxByteArrayLength = 0 ;
      while (true) {
        if (counter == serializedMessageBoxList.length) {
          break;
        }
        int firstLengthByte = serializedMessageBoxList[counter];
        int numOfByteForLength = 1;
        if ((firstLengthByte & 0x80) == 0) {
          serializedMessageBoxByteArrayLength = serializedMessageBoxList[counter];
        } else {
          counter++;
          numOfByteForLength = firstLengthByte & 0x0f;
          byte[] serializedMessageBoxLengthByteArray = new byte[numOfByteForLength];
          int serializedDataWrapperLengthByteArrayCounter = 0;
          for (int i = counter; i < counter + numOfByteForLength; i++) {
            serializedMessageBoxLengthByteArray[serializedDataWrapperLengthByteArrayCounter++] = serializedMessageBoxList[i];
          }
          serializedMessageBoxByteArrayLength = ByteArrayToInteger.getInt(serializedMessageBoxLengthByteArray);
        }
        counter += numOfByteForLength;
        byte[] messageBoxByteArray = new byte[serializedMessageBoxByteArrayLength];
        int messageBoxByteArrayCounter = 0;
        for (int i = counter; i < counter + serializedMessageBoxByteArrayLength; i++) {
          messageBoxByteArray[messageBoxByteArrayCounter++] = serializedMessageBoxList[i];
        }
        counter += serializedMessageBoxByteArrayLength;
        MessageBox messageBox = new MessageBox();
        messageBox.deserialize(messageBoxByteArray);
        messageBoxList.add(messageBox);
      }
    }
  }
}
/******************************************************************
 * Generated by Hottentot JAVA Generator
 * Date: 
 * Name: 
 * Description:
 *   This file contains definition of an abstract service class.
 ******************************************************************/
package ir.ntnaeem.hottentot.examples.listtest.hotgen;

import ir.ntnaeem.hottentot.serializerHelper.PDTSerializer;
import ir.ntnaeem.hottentot.serializerHelper.PDTDeserializer;
import ir.ntnaeem.hottentot.serializerHelper.ByteArrayToInteger;
import java.util.List;
import java.util.ArrayList;

public class Crawler {
  private long id;
  private byte type;
  private String name = "";
  private String ip = "";
  private short port;
  public void setId(long id) {
    this.id = id;
  }
  public long getId() {
    return id;
  }
  public void setType(byte type) {
    this.type = type;
  }
  public byte getType() {
    return type;
  }
  public void setName(String name) {
    this.name = name;
  }
  public String getName() {
    return name;
  }
  public void setIp(String ip) {
    this.ip = ip;
  }
  public String getIp() {
    return ip;
  }
  public void setPort(short port) {
    this.port = port;
  }
  public short getPort() {
    return port;
  }
  @Override 
  public String toString() { 
    return "Crawler{" + 
      "id = '" + id + '\'' + 
      ",type = '" + type + '\'' + 
      ",name = '" + name + '\'' + 
      ",ip = '" + ip + '\'' + 
      ",port = '" + port + '\'' + 
      "}"; 
  }
	
  public byte[] serialize() {
    byte[] serializedId = PDTSerializer.getInt64(id);
    byte[] serializedType = PDTSerializer.getInt8(type);
    byte[] serializedName = PDTSerializer.getString(name);
    byte[] serializedIp = PDTSerializer.getString(ip);
    byte[] serializedPort = PDTSerializer.getInt16(port);
    byte[] output = new byte[serializedId.length + serializedType.length + serializedName.length + serializedIp.length + serializedPort.length];
    int counter = 0;
    //use a loop for every property
    for (int i = 0; i < serializedId.length; i++) {
      output[counter++] = serializedId[i];
    }
    for (int i = 0; i < serializedType.length; i++) {
      output[counter++] = serializedType[i];
    }
    for (int i = 0; i < serializedName.length; i++) {
      output[counter++] = serializedName[i];
    }
    for (int i = 0; i < serializedIp.length; i++) {
      output[counter++] = serializedIp[i];
    }
    for (int i = 0; i < serializedPort.length; i++) {
      output[counter++] = serializedPort[i];
    }
    return output;
  }
    
  public void deserialize(byte[] serializedByteArray) {
    if(serializedByteArray.length != 0){
      int counter = 0;
      int dataLength = 0;
      int numbersOfBytesForDataLength;
      //do for every property
    //id : long
    byte[] idByteArray = new byte[8];
    for(int i = 0 ; i < 8 ; i++){
      idByteArray[i] = serializedByteArray[counter++];
    }
    setId(PDTDeserializer.getInt64(idByteArray));
    //type : byte
    byte[] typeByteArray = new byte[1];
    for(int i = 0 ; i < 1 ; i++){
      typeByteArray[i] = serializedByteArray[counter++];
    }
    setType(PDTDeserializer.getInt8(typeByteArray));
    //name : String
    dataLength = 0;
    if(( serializedByteArray[counter] & 0x80) == 0 ) {
      dataLength = serializedByteArray[counter++];
    }else{
      numbersOfBytesForDataLength = serializedByteArray[counter++] & 0x0f;
      byte[] serializedByteArrayLength = new byte[numbersOfBytesForDataLength];
      for(byte i = 0 ; i < numbersOfBytesForDataLength ; i++){
        serializedByteArrayLength[i] = serializedByteArray[counter++];
      }
      dataLength = ByteArrayToInteger.getInt(serializedByteArrayLength);
    }
    byte[] nameByteArray = new byte[dataLength];
    System.arraycopy(serializedByteArray,counter,nameByteArray,0,dataLength);
    counter += dataLength;
    setName(PDTDeserializer.getString(nameByteArray));
    //ip : String
    dataLength = 0;
    if(( serializedByteArray[counter] & 0x80) == 0 ) {
      dataLength = serializedByteArray[counter++];
    }else{
      numbersOfBytesForDataLength = serializedByteArray[counter++] & 0x0f;
      byte[] serializedByteArrayLength = new byte[numbersOfBytesForDataLength];
      for(byte i = 0 ; i < numbersOfBytesForDataLength ; i++){
        serializedByteArrayLength[i] = serializedByteArray[counter++];
      }
      dataLength = ByteArrayToInteger.getInt(serializedByteArrayLength);
    }
    byte[] ipByteArray = new byte[dataLength];
    System.arraycopy(serializedByteArray,counter,ipByteArray,0,dataLength);
    counter += dataLength;
    setIp(PDTDeserializer.getString(ipByteArray));
    //port : short
    byte[] portByteArray = new byte[2];
    for(int i = 0 ; i < 2 ; i++){
      portByteArray[i] = serializedByteArray[counter++];
    }
    setPort(PDTDeserializer.getInt16(portByteArray));

    }
  }
}

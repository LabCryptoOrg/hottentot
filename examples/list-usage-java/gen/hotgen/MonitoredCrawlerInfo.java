/******************************************************************
 * Generated by Hottentot JAVA Generator
 * Date: 
 * Name: 
 * Description:
 *   This file contains definition of an abstract service class.
 ******************************************************************/
package ir.ntnaeem.hottentot.examples.listtest.hotgen;

import ir.ntnaeem.hottentot.serializerHelper.PDTSerializer;
import ir.ntnaeem.hottentot.serializerHelper.PDTDeserializer;
import ir.ntnaeem.hottentot.serializerHelper.ByteArrayToInteger;
import java.util.List;
import java.util.ArrayList;

public class MonitoredCrawlerInfo {
  private int totalRam;
  private int usedRam;
  private int numOfCrawledURLs;
  private int numOfFailedURLs;
  private short numOfCrawledDomains;
  public void setTotalRam(int totalRam) {
    this.totalRam = totalRam;
  }
  public int getTotalRam() {
    return totalRam;
  }
  public void setUsedRam(int usedRam) {
    this.usedRam = usedRam;
  }
  public int getUsedRam() {
    return usedRam;
  }
  public void setNumOfCrawledURLs(int numOfCrawledURLs) {
    this.numOfCrawledURLs = numOfCrawledURLs;
  }
  public int getNumOfCrawledURLs() {
    return numOfCrawledURLs;
  }
  public void setNumOfFailedURLs(int numOfFailedURLs) {
    this.numOfFailedURLs = numOfFailedURLs;
  }
  public int getNumOfFailedURLs() {
    return numOfFailedURLs;
  }
  public void setNumOfCrawledDomains(short numOfCrawledDomains) {
    this.numOfCrawledDomains = numOfCrawledDomains;
  }
  public short getNumOfCrawledDomains() {
    return numOfCrawledDomains;
  }
  @Override 
  public String toString() { 
    return "MonitoredCrawlerInfo{" + 
      "totalRam = '" + totalRam + '\'' + 
      ",usedRam = '" + usedRam + '\'' + 
      ",numOfCrawledURLs = '" + numOfCrawledURLs + '\'' + 
      ",numOfFailedURLs = '" + numOfFailedURLs + '\'' + 
      ",numOfCrawledDomains = '" + numOfCrawledDomains + '\'' + 
      "}"; 
  }
	
  public byte[] serialize() {
    byte[] serializedTotalRam = PDTSerializer.getInt32(totalRam);
    byte[] serializedUsedRam = PDTSerializer.getInt32(usedRam);
    byte[] serializedNumOfCrawledURLs = PDTSerializer.getInt32(numOfCrawledURLs);
    byte[] serializedNumOfFailedURLs = PDTSerializer.getInt32(numOfFailedURLs);
    byte[] serializedNumOfCrawledDomains = PDTSerializer.getInt16(numOfCrawledDomains);
    byte[] output = new byte[serializedTotalRam.length + serializedUsedRam.length + serializedNumOfCrawledURLs.length + serializedNumOfFailedURLs.length + serializedNumOfCrawledDomains.length];
    int counter = 0;
    //use a loop for every property
    for (int i = 0; i < serializedTotalRam.length; i++) {
      output[counter++] = serializedTotalRam[i];
    }
    for (int i = 0; i < serializedUsedRam.length; i++) {
      output[counter++] = serializedUsedRam[i];
    }
    for (int i = 0; i < serializedNumOfCrawledURLs.length; i++) {
      output[counter++] = serializedNumOfCrawledURLs[i];
    }
    for (int i = 0; i < serializedNumOfFailedURLs.length; i++) {
      output[counter++] = serializedNumOfFailedURLs[i];
    }
    for (int i = 0; i < serializedNumOfCrawledDomains.length; i++) {
      output[counter++] = serializedNumOfCrawledDomains[i];
    }
    return output;
  }
    
  public void deserialize(byte[] serializedByteArray) {
    if(serializedByteArray.length != 0){
      int counter = 0;
      int dataLength = 0;
      int numbersOfBytesForDataLength;
      //do for every property
    //totalRam : int
    byte[] totalRamByteArray = new byte[4];
    for(int i = 0 ; i < 4 ; i++){
      totalRamByteArray[i] = serializedByteArray[counter++];
    }
    setTotalRam(PDTDeserializer.getInt32(totalRamByteArray));
    //usedRam : int
    byte[] usedRamByteArray = new byte[4];
    for(int i = 0 ; i < 4 ; i++){
      usedRamByteArray[i] = serializedByteArray[counter++];
    }
    setUsedRam(PDTDeserializer.getInt32(usedRamByteArray));
    //numOfCrawledURLs : int
    byte[] numOfCrawledURLsByteArray = new byte[4];
    for(int i = 0 ; i < 4 ; i++){
      numOfCrawledURLsByteArray[i] = serializedByteArray[counter++];
    }
    setNumOfCrawledURLs(PDTDeserializer.getInt32(numOfCrawledURLsByteArray));
    //numOfFailedURLs : int
    byte[] numOfFailedURLsByteArray = new byte[4];
    for(int i = 0 ; i < 4 ; i++){
      numOfFailedURLsByteArray[i] = serializedByteArray[counter++];
    }
    setNumOfFailedURLs(PDTDeserializer.getInt32(numOfFailedURLsByteArray));
    //numOfCrawledDomains : short
    byte[] numOfCrawledDomainsByteArray = new byte[2];
    for(int i = 0 ; i < 2 ; i++){
      numOfCrawledDomainsByteArray[i] = serializedByteArray[counter++];
    }
    setNumOfCrawledDomains(PDTDeserializer.getInt16(numOfCrawledDomainsByteArray));

    }
  }
}

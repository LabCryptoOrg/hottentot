/******************************************************************
 * Generated by Hottentot JAVA Generator
 * Date: 
 * Name: 
 * Description:
 *   This file contains definition of an abstract service class.
 ******************************************************************/
package ir.ntnaeem.hottentot.examples.listtest.hotgen;

import ir.ntnaeem.hottentot.serializerHelper.PDTSerializer;
import ir.ntnaeem.hottentot.serializerHelper.PDTDeserializer;
import ir.ntnaeem.hottentot.serializerHelper.ByteArrayToInteger;
import java.util.List;
import java.util.ArrayList;

public class reportRequest {
  private long fromTs;
  private long toTs;
  private long crawlerIds;
  private List<Byte> options = new ArrayList<Byte>();
  public void setFromTs(long fromTs) {
    this.fromTs = fromTs;
  }
  public long getFromTs() {
    return fromTs;
  }
  public void setToTs(long toTs) {
    this.toTs = toTs;
  }
  public long getToTs() {
    return toTs;
  }
  public void setCrawlerIds(long crawlerIds) {
    this.crawlerIds = crawlerIds;
  }
  public long getCrawlerIds() {
    return crawlerIds;
  }
  public void setOptions(List<Byte> options) {
    this.options = options;
  }
  public List<Byte> getOptions() {
    return options;
  }
  @Override 
  public String toString() { 
    return "reportRequest{" + 
      "fromTs = '" + fromTs + '\'' + 
      ",toTs = '" + toTs + '\'' + 
      ",crawlerIds = '" + crawlerIds + '\'' + 
      ",options = '" + options + '\'' + 
      "}"; 
  }
	
  public byte[] serialize() {
    byte[] serializedFromTs = PDTSerializer.getInt64(fromTs);
    byte[] serializedToTs = PDTSerializer.getInt64(toTs);
    byte[] serializedCrawlerIds = PDTSerializer.getInt64(crawlerIds);
    SerializableUint8List serializableUint8List4 = new SerializableUint8List();
    serializableUint8List4.setUint8List(options);
    byte[] serializedOptions  = serializableUint8List4.serializeWithLength();
    byte[] output = new byte[serializedFromTs.length + serializedToTs.length + serializedCrawlerIds.length + serializedOptions.length];
    int counter = 0;
    //use a loop for every property
    for (int i = 0; i < serializedFromTs.length; i++) {
      output[counter++] = serializedFromTs[i];
    }
    for (int i = 0; i < serializedToTs.length; i++) {
      output[counter++] = serializedToTs[i];
    }
    for (int i = 0; i < serializedCrawlerIds.length; i++) {
      output[counter++] = serializedCrawlerIds[i];
    }
    for (int i = 0; i < serializedOptions.length; i++) {
      output[counter++] = serializedOptions[i];
    }
    return output;
  }
    
  public void deserialize(byte[] serializedByteArray) {
    if(serializedByteArray.length != 0){
      int counter = 0;
      int dataLength = 0;
      int numbersOfBytesForDataLength;
      //do for every property
    //fromTs : long
    byte[] fromTsByteArray = new byte[8];
    for(int i = 0 ; i < 8 ; i++){
      fromTsByteArray[i] = serializedByteArray[counter++];
    }
    setFromTs(PDTDeserializer.getInt64(fromTsByteArray));
    //toTs : long
    byte[] toTsByteArray = new byte[8];
    for(int i = 0 ; i < 8 ; i++){
      toTsByteArray[i] = serializedByteArray[counter++];
    }
    setToTs(PDTDeserializer.getInt64(toTsByteArray));
    //crawlerIds : long
    byte[] crawlerIdsByteArray = new byte[8];
    for(int i = 0 ; i < 8 ; i++){
      crawlerIdsByteArray[i] = serializedByteArray[counter++];
    }
    setCrawlerIds(PDTDeserializer.getInt64(crawlerIdsByteArray));
    //options : List<Byte>
    dataLength = 0;
    if(( serializedByteArray[counter] & 0x80) == 0 ) {
      dataLength = serializedByteArray[counter++];
    }else{
      numbersOfBytesForDataLength = serializedByteArray[counter++] & 0x0f;
      byte[] serializedByteArrayLength = new byte[numbersOfBytesForDataLength];
      for(byte i = 0 ; i < numbersOfBytesForDataLength ; i++){
        serializedByteArrayLength[i] = serializedByteArray[counter++];
      }
      dataLength = ByteArrayToInteger.getInt(serializedByteArrayLength);
    }
    byte[] optionsByteArray = new byte[dataLength];
    System.arraycopy(serializedByteArray,counter,optionsByteArray,0,dataLength);
    counter += dataLength;
    SerializableUint8List serializableUint8List1 = new SerializableUint8List();
    serializableUint8List1.deserialize(optionsByteArray);
    setOptions(serializableUint8List1.getUint8List());

    }
  }
}

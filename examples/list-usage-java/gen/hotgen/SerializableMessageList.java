/******************************************************************
 * Generated by Hottentot JAVA Generator
 * Date:
 * Name:
 * Description:
 ******************************************************************/
package ir.ntnaeem.hottentot.examples.listtest.hotgen;

import ir.ntnaeem.hottentot.serializerHelper.DataLengthByteArrayMaker;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import ir.ntnaeem.hottentot.serializerHelper.ByteArrayToInteger;
import ir.ntnaeem.hottentot.type.*;

public class SerializableMessageList {

  private List<Message> messageList;

  public SerializableMessageList() {
    messageList = new ArrayList<Message>();
  }

  public List<Message> getMessageList() {
    return messageList;
  }

  public void setMessageList(List<Message> messageList) {
    this.messageList = messageList;
  }

  public byte[] serialize() {
    if (messageList.size() != 0) {
      int counter = 0;
      int dataLength = 0;
      //calculate serializedMessageListLength
      for (Message message : messageList) {
        
        byte[] serializedMessage = message.serialize();
        byte[] messageLengthByteArray =
          DataLengthByteArrayMaker.getByteArray(serializedMessage.length);
        dataLength += messageLengthByteArray.length + serializedMessage.length;
      }
      byte[] serializedMessageList = new byte[dataLength];
      for (Message message : messageList) {
        
        byte[] serializedMessage = message.serialize();
        int serializedMessageLength = serializedMessage.length;
        byte[] messageLengthByteArray =
          DataLengthByteArrayMaker.getByteArray(serializedMessageLength);
        System.arraycopy(messageLengthByteArray, 0, serializedMessageList, counter, messageLengthByteArray.length);
        counter += messageLengthByteArray.length;
        System.arraycopy(serializedMessage, 0, serializedMessageList, counter, serializedMessage.length);
        counter += serializedMessage.length;
      }
      return serializedMessageList;
    }
    return new byte[0];
  }

  public void deserialize(byte[] serializedMessageList) {
    if(serializedMessageList.length != 0){
      int counter = 0;
      int serializedMessageByteArrayLength = 0 ;
      while (true) {
        if (counter == serializedMessageList.length) {
          break;
        }
        int firstLengthByte = serializedMessageList[counter];
        int numOfByteForLength = 1;
        if ((firstLengthByte & 0x80) == 0) {
          serializedMessageByteArrayLength = serializedMessageList[counter];
        } else {
          counter++;
          numOfByteForLength = firstLengthByte & 0x0f;
          byte[] serializedMessageLengthByteArray = new byte[numOfByteForLength];
          int serializedDataWrapperLengthByteArrayCounter = 0;
          for (int i = counter; i < counter + numOfByteForLength; i++) {
            serializedMessageLengthByteArray[serializedDataWrapperLengthByteArrayCounter++] = serializedMessageList[i];
          }
          serializedMessageByteArrayLength = ByteArrayToInteger.getInt(serializedMessageLengthByteArray);
        }
        counter += numOfByteForLength;
        byte[] messageByteArray = new byte[serializedMessageByteArrayLength];
        int messageByteArrayCounter = 0;
        for (int i = counter; i < counter + serializedMessageByteArrayLength; i++) {
          messageByteArray[messageByteArrayCounter++] = serializedMessageList[i];
        }
        counter += serializedMessageByteArrayLength;
        Message message = new Message();
        message.deserialize(messageByteArray);
        messageList.add(message);
      }
    }
  }
}
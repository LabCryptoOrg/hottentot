/******************************************************************
 * Generated by Hottentot JAVA Generator
 * Date: 
 * Name: 
 * Description:
 *   
 ******************************************************************/
package ir.ntnaeem.hottentot.examples.listtest.hotgen;

import ir.ntnaeem.hottentot.runtime.Argument;
import ir.ntnaeem.hottentot.runtime.Request;
import ir.ntnaeem.hottentot.runtime.RequestHandler;
import ir.ntnaeem.hottentot.runtime.Response;
import ir.ntnaeem.hottentot.runtime.Service;
import ir.ntnaeem.hottentot.runtime.config.Config;
import ir.ntnaeem.hottentot.runtime.exception.MethodNotSupportException;
import ir.ntnaeem.hottentot.runtime.exception.TcpClientConnectException;
import ir.ntnaeem.hottentot.runtime.exception.TcpClientReadException;
import ir.ntnaeem.hottentot.runtime.exception.TcpClientWriteException;
import ir.ntnaeem.hottentot.serializerHelper.PDTDeserializer;
import ir.ntnaeem.hottentot.serializerHelper.PDTSerializer;
import java.util.List;

public class ReportingRequestHandler extends RequestHandler {
  public ReportingRequestHandler(Service service) {
    super(service);
  }
  @Override
  public Response handleRequest(Request request) throws TcpClientWriteException, TcpClientReadException, TcpClientConnectException {
    long methodId = request.getMethodId();
    ReportingService reportingImpl = (AbstractReportingService) service;
    if(methodId == 115444622L){
      List <Argument> args = request.getArgs();
      Argument arg0 = args.get(0);
      byte[] serializedCrawlerId = arg0.getData();
      long crawlerId = PDTDeserializer.getUint64(serializedCrawlerId);
      Response response = new Response();
      reportingImpl.registerCrawlerId(crawlerId);
      response.setStatusCode((byte) 0);
      response.setData(new byte[]{0});
      response.setLength(0);
      return response;
    }
    if(methodId == 2681060607L){
      List <Argument> args = request.getArgs();
      Argument arg0 = args.get(0);
      byte[] serializedCrawlerId = arg0.getData();
      long crawlerId = PDTDeserializer.getUint64(serializedCrawlerId);
      Response response = new Response();
      reportingImpl.unregisterCrawlerId(crawlerId);
      response.setStatusCode((byte) 0);
      response.setData(new byte[]{0});
      response.setLength(0);
      return response;
    }
    if(methodId == 1860609099L){
      List <Argument> args = request.getArgs();
      Argument arg0 = args.get(0);
      byte[] serializedCrawlerInfoList = arg0.getData();
      SerializableWantedCrawlerInfoList serializableWantedCrawlerInfoList = new SerializableWantedCrawlerInfoList();
      serializableWantedCrawlerInfoList.deserialize( serializedCrawlerInfoList);
      List<WantedCrawlerInfo> crawlerInfoList = serializableWantedCrawlerInfoList.getWantedCrawlerInfoList();
      SerializableReportedCrawlerInfoList serializableReportedCrawlerInfoList = new SerializableReportedCrawlerInfoList();
      Response response = new Response();
      List<ReportedCrawlerInfo> reportedcrawlerinfoList = reportingImpl.getReport(crawlerInfoList);
      byte[] serializedReportedCrawlerInfoList;
      if(reportedcrawlerinfoList == null){
        serializedReportedCrawlerInfoList  = new byte[0];
      }else{
        serializableReportedCrawlerInfoList.setReportedCrawlerInfoList(reportedcrawlerinfoList);
        serializedReportedCrawlerInfoList = serializableReportedCrawlerInfoList.serialize();
      }
      response.setStatusCode((byte) 0);
      response.setData(serializedReportedCrawlerInfoList);
      response.setLength(serializedReportedCrawlerInfoList.length + 1);
      return response;
    }

    Response response = new Response();
    response.setStatusCode((byte) 255);
    response.setData(new byte[]{0});
    response.setLength(2);
    if(Config.isVerboseMode){
      System.out.println("WARN : method id is incorrect");
    }
    return response;
  }
}

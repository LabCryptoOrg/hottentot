/******************************************************************
 * Generated by Hottentot JAVA Generator
 * Date:
 * Name:
 * Description:
 ******************************************************************/
package ir.ntnaeem.hottentot.examples.listtest.hotgen;

import ir.ntnaeem.hottentot.serializerHelper.DataLengthByteArrayMaker;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import ir.ntnaeem.hottentot.serializerHelper.ByteArrayToInteger;
import ir.ntnaeem.hottentot.type.*;

public class SerializableWantedCrawlerInfoList {

  private List<WantedCrawlerInfo> wantedCrawlerInfoList;

  public SerializableWantedCrawlerInfoList() {
    wantedCrawlerInfoList = new ArrayList<WantedCrawlerInfo>();
  }

  public List<WantedCrawlerInfo> getWantedCrawlerInfoList() {
    return wantedCrawlerInfoList;
  }

  public void setWantedCrawlerInfoList(List<WantedCrawlerInfo> wantedCrawlerInfoList) {
    this.wantedCrawlerInfoList = wantedCrawlerInfoList;
  }

  public byte[] serialize() {
    if (wantedCrawlerInfoList.size() != 0) {
      int counter = 0;
      int dataLength = 0;
      //calculate serializedWantedCrawlerInfoListLength
      for (WantedCrawlerInfo wantedCrawlerInfo : wantedCrawlerInfoList) {
        
        byte[] serializedWantedCrawlerInfo = wantedCrawlerInfo.serialize();
        byte[] wantedCrawlerInfoLengthByteArray =
          DataLengthByteArrayMaker.getByteArray(serializedWantedCrawlerInfo.length);
        dataLength += wantedCrawlerInfoLengthByteArray.length + serializedWantedCrawlerInfo.length;
      }
      byte[] serializedWantedCrawlerInfoList = new byte[dataLength];
      for (WantedCrawlerInfo wantedCrawlerInfo : wantedCrawlerInfoList) {
        
        byte[] serializedWantedCrawlerInfo = wantedCrawlerInfo.serialize();
        int serializedWantedCrawlerInfoLength = serializedWantedCrawlerInfo.length;
        byte[] wantedCrawlerInfoLengthByteArray =
          DataLengthByteArrayMaker.getByteArray(serializedWantedCrawlerInfoLength);
        System.arraycopy(wantedCrawlerInfoLengthByteArray, 0, serializedWantedCrawlerInfoList, counter, wantedCrawlerInfoLengthByteArray.length);
        counter += wantedCrawlerInfoLengthByteArray.length;
        System.arraycopy(serializedWantedCrawlerInfo, 0, serializedWantedCrawlerInfoList, counter, serializedWantedCrawlerInfo.length);
        counter += serializedWantedCrawlerInfo.length;
      }
      return serializedWantedCrawlerInfoList;
    }
    return new byte[0];
  }

  public byte[] serializeWithLength() {
    byte[] serializedBytes = serialize();
    byte[] dataLengthInBytes = DataLengthByteArrayMaker.getByteArray(serializedBytes.length);
    byte[] output = new byte[serializedBytes.length + dataLengthInBytes.length];
    int c = 0;
    for(int i = 0 ; i < dataLengthInBytes.length ; i++){
      output[c++] = dataLengthInBytes[i];
    }
    for(int i = 0 ; i < serializedBytes.length ; i++){
      output[c++] = serializedBytes[i];
    }
    return output;
  }

  public void deserialize(byte[] serializedWantedCrawlerInfoList) {
    if(serializedWantedCrawlerInfoList.length != 0){
      int counter = 0;
      int serializedWantedCrawlerInfoByteArrayLength = 0 ;
      while (true) {
        if (counter == serializedWantedCrawlerInfoList.length) {
          break;
        }
        int firstLengthByte = serializedWantedCrawlerInfoList[counter];
        int numOfByteForLength = 1;
        if ((firstLengthByte & 0x80) == 0) {
          serializedWantedCrawlerInfoByteArrayLength = serializedWantedCrawlerInfoList[counter];
        } else {
          counter++;
          numOfByteForLength = firstLengthByte & 0x0f;
          byte[] serializedWantedCrawlerInfoLengthByteArray = new byte[numOfByteForLength];
          int serializedDataWrapperLengthByteArrayCounter = 0;
          for (int i = counter; i < counter + numOfByteForLength; i++) {
            serializedWantedCrawlerInfoLengthByteArray[serializedDataWrapperLengthByteArrayCounter++] = serializedWantedCrawlerInfoList[i];
          }
          serializedWantedCrawlerInfoByteArrayLength = ByteArrayToInteger.getInt(serializedWantedCrawlerInfoLengthByteArray);
        }
        counter += numOfByteForLength;
        byte[] wantedCrawlerInfoByteArray = new byte[serializedWantedCrawlerInfoByteArrayLength];
        int wantedCrawlerInfoByteArrayCounter = 0;
        for (int i = counter; i < counter + serializedWantedCrawlerInfoByteArrayLength; i++) {
          wantedCrawlerInfoByteArray[wantedCrawlerInfoByteArrayCounter++] = serializedWantedCrawlerInfoList[i];
        }
        counter += serializedWantedCrawlerInfoByteArrayLength;
        WantedCrawlerInfo wantedCrawlerInfo = new WantedCrawlerInfo();
        wantedCrawlerInfo.deserialize(wantedCrawlerInfoByteArray);
        wantedCrawlerInfoList.add(wantedCrawlerInfo);
      }
    }
  }
}
/******************************************************************
 * Generated by Hottentot JAVA Generator
 * Date:
 * Name:
 * Description:
 ******************************************************************/
package ir.ntnaeem.hottentot.examples.listtest.hotgen;

import ir.ntnaeem.hottentot.serializerHelper.DataLengthByteArrayMaker;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import ir.ntnaeem.hottentot.serializerHelper.ByteArrayToInteger;
import ir.ntnaeem.hottentot.type.*;

public class SerializableCrawlerList {

  private List<Crawler> crawlerList;

  public SerializableCrawlerList() {
    crawlerList = new ArrayList<Crawler>();
  }

  public List<Crawler> getCrawlerList() {
    return crawlerList;
  }

  public void setCrawlerList(List<Crawler> crawlerList) {
    this.crawlerList = crawlerList;
  }

  public byte[] serialize() {
    if (crawlerList.size() != 0) {
      int counter = 0;
      int dataLength = 0;
      //calculate serializedCrawlerListLength
      for (Crawler crawler : crawlerList) {
        
        byte[] serializedCrawler = crawler.serialize();
        byte[] crawlerLengthByteArray =
          DataLengthByteArrayMaker.getByteArray(serializedCrawler.length);
        dataLength += crawlerLengthByteArray.length + serializedCrawler.length;
      }
      byte[] serializedCrawlerList = new byte[dataLength];
      for (Crawler crawler : crawlerList) {
        
        byte[] serializedCrawler = crawler.serialize();
        int serializedCrawlerLength = serializedCrawler.length;
        byte[] crawlerLengthByteArray =
          DataLengthByteArrayMaker.getByteArray(serializedCrawlerLength);
        System.arraycopy(crawlerLengthByteArray, 0, serializedCrawlerList, counter, crawlerLengthByteArray.length);
        counter += crawlerLengthByteArray.length;
        System.arraycopy(serializedCrawler, 0, serializedCrawlerList, counter, serializedCrawler.length);
        counter += serializedCrawler.length;
      }
      return serializedCrawlerList;
    }
    return new byte[0];
  }

  public byte[] serializeWithLength() {
    byte[] serializedBytes = serialize();
    byte[] dataLengthInBytes = DataLengthByteArrayMaker.getByteArray(serializedBytes.length);
    byte[] output = new byte[serializedBytes.length + dataLengthInBytes.length];
    int c = 0;
    for(int i = 0 ; i < dataLengthInBytes.length ; i++){
      output[c++] = dataLengthInBytes[i];
    }
    for(int i = 0 ; i < serializedBytes.length ; i++){
      output[c++] = serializedBytes[i];
    }
    return output;
  }

  public void deserialize(byte[] serializedCrawlerList) {
    if(serializedCrawlerList.length != 0){
      int counter = 0;
      int serializedCrawlerByteArrayLength = 0 ;
      while (true) {
        if (counter == serializedCrawlerList.length) {
          break;
        }
        int firstLengthByte = serializedCrawlerList[counter];
        int numOfByteForLength = 1;
        if ((firstLengthByte & 0x80) == 0) {
          serializedCrawlerByteArrayLength = serializedCrawlerList[counter];
        } else {
          counter++;
          numOfByteForLength = firstLengthByte & 0x0f;
          byte[] serializedCrawlerLengthByteArray = new byte[numOfByteForLength];
          int serializedDataWrapperLengthByteArrayCounter = 0;
          for (int i = counter; i < counter + numOfByteForLength; i++) {
            serializedCrawlerLengthByteArray[serializedDataWrapperLengthByteArrayCounter++] = serializedCrawlerList[i];
          }
          serializedCrawlerByteArrayLength = ByteArrayToInteger.getInt(serializedCrawlerLengthByteArray);
        }
        counter += numOfByteForLength;
        byte[] crawlerByteArray = new byte[serializedCrawlerByteArrayLength];
        int crawlerByteArrayCounter = 0;
        for (int i = counter; i < counter + serializedCrawlerByteArrayLength; i++) {
          crawlerByteArray[crawlerByteArrayCounter++] = serializedCrawlerList[i];
        }
        counter += serializedCrawlerByteArrayLength;
        Crawler crawler = new Crawler();
        crawler.deserialize(crawlerByteArray);
        crawlerList.add(crawler);
      }
    }
  }
}
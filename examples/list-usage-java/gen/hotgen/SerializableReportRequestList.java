/******************************************************************
 * Generated by Hottentot JAVA Generator
 * Date:
 * Name:
 * Description:
 ******************************************************************/
package ir.ntnaeem.hottentot.examples.listtest.hotgen;

import ir.ntnaeem.hottentot.serializerHelper.DataLengthByteArrayMaker;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import ir.ntnaeem.hottentot.serializerHelper.ByteArrayToInteger;
import ir.ntnaeem.hottentot.type.*;

public class SerializableReportRequestList {

  private List<reportRequest> reportRequestList;

  public SerializableReportRequestList() {
    reportRequestList = new ArrayList<reportRequest>();
  }

  public List<reportRequest> getReportRequestList() {
    return reportRequestList;
  }

  public void setReportRequestList(List<reportRequest> reportRequestList) {
    this.reportRequestList = reportRequestList;
  }

  public byte[] serialize() {
    if (reportRequestList.size() != 0) {
      int counter = 0;
      int dataLength = 0;
      //calculate serializedreportRequestListLength
      for (reportRequest reportRequest : reportRequestList) {
        
        byte[] serializedReportRequest = reportRequest.serialize();
        byte[] reportRequestLengthByteArray =
          DataLengthByteArrayMaker.getByteArray(serializedReportRequest.length);
        dataLength += reportRequestLengthByteArray.length + serializedReportRequest.length;
      }
      byte[] serializedReportRequestList = new byte[dataLength];
      for (reportRequest reportRequest : reportRequestList) {
        
        byte[] serializedReportRequest = reportRequest.serialize();
        int serializedReportRequestLength = serializedReportRequest.length;
        byte[] reportRequestLengthByteArray =
          DataLengthByteArrayMaker.getByteArray(serializedReportRequestLength);
        System.arraycopy(reportRequestLengthByteArray, 0, serializedReportRequestList, counter, reportRequestLengthByteArray.length);
        counter += reportRequestLengthByteArray.length;
        System.arraycopy(serializedReportRequest, 0, serializedReportRequestList, counter, serializedReportRequest.length);
        counter += serializedReportRequest.length;
      }
      return serializedReportRequestList;
    }
    return new byte[0];
  }

  public byte[] serializeWithLength() {
    byte[] serializedBytes = serialize();
    byte[] dataLengthInBytes = DataLengthByteArrayMaker.getByteArray(serializedBytes.length);
    byte[] output = new byte[serializedBytes.length + dataLengthInBytes.length];
    int c = 0;
    for(int i = 0 ; i < dataLengthInBytes.length ; i++){
      output[c++] = dataLengthInBytes[i];
    }
    for(int i = 0 ; i < serializedBytes.length ; i++){
      output[c++] = serializedBytes[i];
    }
    return output;
  }

  public void deserialize(byte[] serializedReportRequestList) {
    if(serializedReportRequestList.length != 0){
      int counter = 0;
      int serializedReportRequestByteArrayLength = 0 ;
      while (true) {
        if (counter == serializedReportRequestList.length) {
          break;
        }
        int firstLengthByte = serializedReportRequestList[counter];
        int numOfByteForLength = 1;
        if ((firstLengthByte & 0x80) == 0) {
          serializedReportRequestByteArrayLength = serializedReportRequestList[counter];
        } else {
          counter++;
          numOfByteForLength = firstLengthByte & 0x0f;
          byte[] serializedReportRequestLengthByteArray = new byte[numOfByteForLength];
          int serializedDataWrapperLengthByteArrayCounter = 0;
          for (int i = counter; i < counter + numOfByteForLength; i++) {
            serializedReportRequestLengthByteArray[serializedDataWrapperLengthByteArrayCounter++] = serializedReportRequestList[i];
          }
          serializedReportRequestByteArrayLength = ByteArrayToInteger.getInt(serializedReportRequestLengthByteArray);
        }
        counter += numOfByteForLength;
        byte[] reportRequestByteArray = new byte[serializedReportRequestByteArrayLength];
        int reportRequestByteArrayCounter = 0;
        for (int i = counter; i < counter + serializedReportRequestByteArrayLength; i++) {
          reportRequestByteArray[reportRequestByteArrayCounter++] = serializedReportRequestList[i];
        }
        counter += serializedReportRequestByteArrayLength;
        reportRequest reportRequest = new reportRequest();
        reportRequest.deserialize(reportRequestByteArray);
        reportRequestList.add(reportRequest);
      }
    }
  }
}
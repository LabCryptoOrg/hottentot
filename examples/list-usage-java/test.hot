module ir.ntnaeem.hottentot.examples.listtest {
 
  // ----- management
  struct Crawler {
    uint64 id ord(1);
    uint8 type ord(2);
    string name ord(3);
    string ip ord(4);
    uint16 port ord(5);
    string startURL ord(6);
    list<string> domainList ord(7);
  };


  struct Statistic{
    string subject ord(1);
    string info ord(2);
  };

  struct MonitoredCrawlerInfo {
    uint8 status ord(1);
    uint64 startTs ord(2);
    list<Statistic> statistics ord(3);    
    // uint32 totalRam ord(1);
    // uint32 usedRam ord(2);
    // uint32 numOfCrawledURLs ord(3);
    // uint32 numOfFailedURLs ord(4);
    // uint16 numOfCrawledDomains ord(5);
  };
 
  struct reportRequest {
    uint64 fromTs ord(1);
    uint64 toTs ord(2);
    uint64 crawlerIds ord(3);
    list<uint8> options ord(4);
  };

  struct ReportEntry {
    uint64 date1 ord(1);
    string title ord(2);
    string body ord(3);
  };

  struct ReportedCrawlerInfo {
    list<string> crawledDomains ord(1);
    list<string> crawledUrls ord(2);
    list<string> failedUrls ord(3);
  };


   stateless service Management {
    bool isCrawlerIdValid(uint64 crawlerId);
    uint64 startCrawler(Crawler crawler);
    void stopCrawler(uint64 crawlerId);
    void pauseCrawler(uint64 crawlerId);
    void resumeCrawler(uint64 crawlerId);
    // Get methods
    list<Crawler> getCrawlers();
    Crawler getCrawlerById(uint64 crawlerId);
    string getStartURL(uint64 crawlerId);
    list<string> getDomainList(uint64 crawlerId);
  };
 

  //-------- reporting 
  stateless service Reporting {
    void registerCrawlerId(uint64 crawlerId);
    void unregisterCrawlerId(uint64 crawlerId);
    list<ReportEntry> getReport(list<reportRequest> crawlerInfoList); 
  };
  
  // -------- monitoring
  stateless service Monitoring {
    void registerCrawlerId(uint64 crawlerId);
    void unregisterCrawlerId(uint64 crawlerId);
    list<MonitoredCrawlerInfo> getMonitoredCrawlersInfo(list<uint64> crawlerIdlist);
  }; 

};

/******************************************************************
 * Generated by Hottentot CC Generator
 * Date: 30-01-2016 08:21:47
 * Name: sample_struct.cc
 * Description:
 *   This file contains implementation of SampleStruct class.
 ******************************************************************/

#include <iostream>
#include <string.h>

#include "sample_struct.h"


namespace hotgen {
  unsigned char *
  SampleStruct::Serialize(uint32_t *length_ptr) {
    uint32_t totalLength = 0;
    uint32_t length0 = 0;
    unsigned char *data0 = ustatus8_.Serialize(&length0);
    totalLength += length0;
    uint32_t length1 = 0;
    unsigned char *data1 = ustatus16_.Serialize(&length1);
    totalLength += length1;
    uint32_t length2 = 0;
    unsigned char *data2 = ustatus32_.Serialize(&length2);
    totalLength += length2;
    uint32_t length3 = 0;
    unsigned char *data3 = ustatus64_.Serialize(&length3);
    totalLength += length3;
    uint32_t length4 = 0;
    unsigned char *data4 = status8_.Serialize(&length4);
    totalLength += length4;
    uint32_t length5 = 0;
    unsigned char *data5 = status16_.Serialize(&length5);
    totalLength += length5;
    uint32_t length6 = 0;
    unsigned char *data6 = status32_.Serialize(&length6);
    totalLength += length6;
    uint32_t length7 = 0;
    unsigned char *data7 = status64_.Serialize(&length7);
    totalLength += length7;
    unsigned char *data = new unsigned char[totalLength];
    uint32_t c = 0;
    for (uint32_t i = 0; i < length0; i++) {
      data[c++] = data0[i];
    }
    for (uint32_t i = 0; i < length1; i++) {
      data[c++] = data1[i];
    }
    for (uint32_t i = 0; i < length2; i++) {
      data[c++] = data2[i];
    }
    for (uint32_t i = 0; i < length3; i++) {
      data[c++] = data3[i];
    }
    for (uint32_t i = 0; i < length4; i++) {
      data[c++] = data4[i];
    }
    for (uint32_t i = 0; i < length5; i++) {
      data[c++] = data5[i];
    }
    for (uint32_t i = 0; i < length6; i++) {
      data[c++] = data6[i];
    }
    for (uint32_t i = 0; i < length7; i++) {
      data[c++] = data7[i];
    }
    if (c != totalLength) {
      std::cout << "Struct Serialization: Inconsistency in length of serialized byte array." << std::endl;
      exit(1);
    };
    if (length_ptr) {
      *length_ptr = totalLength;
    }
    return data;
  }
  void
  SampleStruct::Deserialize(unsigned char *data, uint32_t length) {
    uint32_t c = 0, elength = 0;
    ustatus8_.Deserialize(data + c, 1);
    c += 1;
    ustatus16_.Deserialize(data + c, 2);
    c += 2;
    ustatus32_.Deserialize(data + c, 4);
    c += 4;
    ustatus64_.Deserialize(data + c, 8);
    c += 8;
    status8_.Deserialize(data + c, 1);
    c += 1;
    status16_.Deserialize(data + c, 2);
    c += 2;
    status32_.Deserialize(data + c, 4);
    c += 4;
    status64_.Deserialize(data + c, 8);
    c += 8;
    if (c != length) {
      std::cout << "Struct Deserialization: Inconsistency in length of deserialized byte array." << std::endl;
      exit(1);
    };
  }
} // END OF NAMESPACE hotgen
/******************************************************************
 * Generated by Hottentot JAVA Generator
 * Date: 
 * Name: 
 * Description:
 *   
 ******************************************************************/
package hotgen;

import ir.ntnaeem.hottentot.runtime.Argument;
import ir.ntnaeem.hottentot.runtime.Request;
import ir.ntnaeem.hottentot.runtime.RequestHandler;
import ir.ntnaeem.hottentot.runtime.Response;
import ir.ntnaeem.hottentot.runtime.Service;
import ir.ntnaeem.hottentot.runtime.exception.MethodNotSupportException;
import ir.ntnaeem.hottentot.runtime.exception.TcpClientConnectException;
import ir.ntnaeem.hottentot.runtime.exception.TcpClientReadException;
import ir.ntnaeem.hottentot.runtime.exception.TcpClientWriteException;
import ir.ntnaeem.hottentot.serializerHelper.PDTDeserializer;
import ir.ntnaeem.hottentot.serializerHelper.PDTSerializer;
import java.util.List;

public class TestRequestHandler extends RequestHandler {
  public TestRequestHandler(Service service) {
    super(service);
  }
  @Override
  public Response handleRequest(Request request) throws TcpClientWriteException, TcpClientReadException, TcpClientConnectException, MethodNotSupportException {
    long methodId = request.getMethodId();
    TestService testImpl = (AbstractTestService) service;

    if(methodId == 3860892363L){
      List <Argument> args = request.getArgs();
      Argument arg0 = args.get(0);
      byte[] serializedCredential = arg0.getData();
      Credential credential = new Credential();
      credential.deserialize(serializedCredential);
      SerializableTokenList serializableTokenList = new SerializableTokenList();
      Response response = new Response();
      List<Token> tokenList = testImpl.auth(credential);
      byte[] serializedTokenList;
      if(tokenList == null){
        serializedTokenList  = new byte[0];
      }else{
        serializableTokenList.setTokenList(tokenList);
        serializedTokenList = serializableTokenList.serialize();
      }
      response.setStatusCode((byte) 0);
      response.setData(serializedTokenList);
      response.setLength(serializedTokenList.length + 1);
      return response;
    }
    if(methodId == 2066849401L){
      List <Argument> args = request.getArgs();
      SerializableDataWrapperList serializableDataWrapperList = new SerializableDataWrapperList();
      Response response = new Response();
      List<DataWrapper> datawrapperList = testImpl.test();
      byte[] serializedDataWrapperList;
      if(datawrapperList == null){
        serializedDataWrapperList  = new byte[0];
      }else{
        serializableDataWrapperList.setDataWrapperList(datawrapperList);
        serializedDataWrapperList = serializableDataWrapperList.serialize();
      }
      response.setStatusCode((byte) 0);
      response.setData(serializedDataWrapperList);
      response.setLength(serializedDataWrapperList.length + 1);
      return response;
    }
    if(methodId == 2719924681L){
      List <Argument> args = request.getArgs();
      SerializableStringWrapperList serializableStringWrapperList = new SerializableStringWrapperList();
      Response response = new Response();
      List<StringWrapper> stringwrapperList = testImpl.test2();
      byte[] serializedStringWrapperList;
      if(stringwrapperList == null){
        serializedStringWrapperList  = new byte[0];
      }else{
        serializableStringWrapperList.setStringWrapperList(stringwrapperList);
        serializedStringWrapperList = serializableStringWrapperList.serialize();
      }
      response.setStatusCode((byte) 0);
      response.setData(serializedStringWrapperList);
      response.setLength(serializedStringWrapperList.length + 1);
      return response;
    }
    if(methodId == 3413469625L){
      List <Argument> args = request.getArgs();
      StringWrapper stringWrapper = null;
      Response response = new Response();
      stringWrapper = testImpl.test3();
      byte[] serializedStringWrapper;
      if(stringWrapper == null){
        serializedStringWrapper  = new byte[0];
      }else{
      serializedStringWrapper = stringWrapper.serialize();
      }
      response.setStatusCode((byte) 0);
      response.setData(serializedStringWrapper);
      response.setLength(serializedStringWrapper.length + 1);
      return response;
    }
    if(methodId == 3943078220L){
      List <Argument> args = request.getArgs();
      DataWrapper dataWrapper = null;
      Response response = new Response();
      dataWrapper = testImpl.test4();
      byte[] serializedDataWrapper;
      if(dataWrapper == null){
        serializedDataWrapper  = new byte[0];
      }else{
      serializedDataWrapper = dataWrapper.serialize();
      }
      response.setStatusCode((byte) 0);
      response.setData(serializedDataWrapper);
      response.setLength(serializedDataWrapper.length + 1);
      return response;
    }
    if(methodId == 3893264993L){
      List <Argument> args = request.getArgs();
      Argument arg0 = args.get(0);
      byte[] serializedInputList = arg0.getData();
      SerializableStringWrapperList serializableStringWrapperList = new SerializableStringWrapperList();
      serializableStringWrapperList.deserialize( serializedInputList);
      List<StringWrapper> inputList = serializableStringWrapperList.getStringWrapperList();
      DataWrapper dataWrapper = null;
      Response response = new Response();
      dataWrapper = testImpl.test5(inputList);
      byte[] serializedDataWrapper;
      if(dataWrapper == null){
        serializedDataWrapper  = new byte[0];
      }else{
      serializedDataWrapper = dataWrapper.serialize();
      }
      response.setStatusCode((byte) 0);
      response.setData(serializedDataWrapper);
      response.setLength(serializedDataWrapper.length + 1);
      return response;
    }
    if(methodId == 3743195557L){
      List <Argument> args = request.getArgs();
      Argument arg0 = args.get(0);
      byte[] serializedInputs = arg0.getData();
      SerializableDataWrapperList serializableDataWrapperList = new SerializableDataWrapperList();
      serializableDataWrapperList.deserialize( serializedInputs);
      List<DataWrapper> inputs = serializableDataWrapperList.getDataWrapperList();
      DataWrapper dataWrapper = null;
      Response response = new Response();
      dataWrapper = testImpl.test6(inputs);
      byte[] serializedDataWrapper;
      if(dataWrapper == null){
        serializedDataWrapper  = new byte[0];
      }else{
      serializedDataWrapper = dataWrapper.serialize();
      }
      response.setStatusCode((byte) 0);
      response.setData(serializedDataWrapper);
      response.setLength(serializedDataWrapper.length + 1);
      return response;
    }
    if(methodId == 944580077L){
      List <Argument> args = request.getArgs();
      SampleStruct sampleStruct = null;
      Response response = new Response();
      sampleStruct = testImpl.test7();
      byte[] serializedSampleStruct;
      if(sampleStruct == null){
        serializedSampleStruct  = new byte[0];
      }else{
      serializedSampleStruct = sampleStruct.serialize();
      }
      response.setStatusCode((byte) 0);
      response.setData(serializedSampleStruct);
      response.setLength(serializedSampleStruct.length + 1);
      return response;
    }
    if(methodId == 3742699770L){
      List <Argument> args = request.getArgs();
      Argument arg0 = args.get(0);
      byte[] serializedStr = arg0.getData();
      StringWrapper str = new StringWrapper();
      //changes  StringWrapper to Str
      str.deserialize(serializedStr);
      StringWrapper stringWrapper = null;
      Response response = new Response();
      stringWrapper = testImpl.test8(str);
      byte[] serializedStringWrapper;
      if(stringWrapper == null){
        serializedStringWrapper  = new byte[0];
      }else{
      serializedStringWrapper = stringWrapper.serialize();
      }
      response.setStatusCode((byte) 0);
      response.setData(serializedStringWrapper);
      response.setLength(serializedStringWrapper.length + 1);
      return response;
    }
    if(methodId == 539315280L){
      List <Argument> args = request.getArgs();
      Argument arg0 = args.get(0);
      byte[] serializedSample = arg0.getData();
      SampleStruct sample = new SampleStruct();
      //changed serializedSampleStruct ---> serializedSample
      sample.deserialize(serializedSample);
      Result result = null;
      Response response = new Response();
      result = testImpl.test9(sample);
      byte[] serializedResult;
      if(result == null){
        serializedResult  = new byte[0];
      }else{
      serializedResult = result.serialize();
      }
      response.setStatusCode((byte) 0);
      response.setData(serializedResult);
      response.setLength(serializedResult.length + 1);
      return response;
    }

    throw new MethodNotSupportException("method id is incorrect");
  }
}

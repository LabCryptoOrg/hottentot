/******************************************************************
 * Generated by Hottentot JAVA Generator
 * Date: 
 * Name: 
 * Description:
 *   
 ******************************************************************/
package ir.ntnaeem.hottentot.examples.test_all;

import java.util.*;

import org.labcrypto.hottentot.*;
import org.labcrypto.hottentot.runtime.exception.*;
import org.labcrypto.hottentot.runtime.Argument;
import org.labcrypto.hottentot.runtime.Proxy;
import org.labcrypto.hottentot.runtime.Request;
import org.labcrypto.hottentot.runtime.Response;
import org.labcrypto.hottentot.runtime.TcpClient;
import org.labcrypto.hottentot.runtime.exception.HottentotRuntimeException;
import org.labcrypto.hottentot.runtime.exception.TcpClientConnectException;
import org.labcrypto.hottentot.runtime.exception.TcpClientReadException;
import org.labcrypto.hottentot.runtime.exception.TcpClientWriteException;
import org.labcrypto.hottentot.runtime.exception.TcpClientCloseException;
import org.labcrypto.hottentot.runtime.factory.ProtocolFactory;
import org.labcrypto.hottentot.runtime.factory.TcpClientFactory;
import org.labcrypto.hottentot.runtime.protocol.Protocol;


public class TestServiceProxy extends AbstractTestService implements Proxy {
	
  private String host;
  private int port;

  public TestServiceProxy(String host, int port) {
    this.host = host;
    this.port = port;
  }
  public byte[] f1(byte[] d) { 
    //serialize d
    _Data dWrapper = new _Data(d);
    byte[] serializedD = dWrapper.serialize();

    //make request
    Request request = new Request();
    request.setServiceId(3041265512L);
    request.setMethodId(910863811L);
    request.setArgumentCount((byte) 1);
    request.setType(Request.RequestType.InvokeStateless);
    Argument arg0 = new Argument();
    arg0.setDataLength(serializedD.length);
    arg0.setData(serializedD);
    request.addArgument(arg0);
    int dataLength = 0;
    //calculate data length for every argument
    // calulate dDataLength
    int dDataLength= serializedD.length;
    int dDataLengthByteArrayLength = 1;
    if (dDataLength >= 0x80) {
      if (dDataLength <= 0xff) {
        //ex 0x81 0xff
        dDataLengthByteArrayLength = 2;
      } else if (dDataLength <= 0xffff) {
        //ex 0x82 0xff 0xff
        dDataLengthByteArrayLength = 3;
      } else if (dDataLength <= 0xffffff) {
        //ex 0x83 0xff 0xff 0xff
        dDataLengthByteArrayLength = 4;
      }
    }
    dataLength += dDataLength + dDataLengthByteArrayLength;
    // arg count(1) + request type(1) + method ID(4) + service ID(4) = 10;
    request.setLength(10 + dataLength);
    // connect to server
    TcpClient tcpClient = TcpClientFactory.create();
    try{
      tcpClient.connect(host, port);
    } catch (TcpClientConnectException e) {
      throw new HottentotRuntimeException(e);
    }
    // serialize request according to HTNP
    Protocol protocol = ProtocolFactory.create();
    byte[] serializedRequest = protocol.serializeRequest(request);
    // send request
    try {
      tcpClient.write(serializedRequest);
    } catch (TcpClientWriteException e) {
      throw new HottentotRuntimeException(e);
    }
    // read response from server
    byte[] buffer = new byte[256];
    while (!protocol.isResponseComplete()) {
      byte[] dataChunkRead;
      try {
        dataChunkRead = tcpClient.read();
      } catch (TcpClientReadException e) {
        throw new HottentotRuntimeException(e);
      }
      protocol.processDataForResponse(dataChunkRead);
    }
    Response response = protocol.getResponse();
    // close everything
     try { 
       tcpClient.close(); 
    } catch (TcpClientCloseException e) { 
      e.printStackTrace(); 
    } 
    //deserialize datapart from response
    if (response.getStatusCode() == -1) {
      throw new MethodNotSupportRuntimeException();
    }
    _Data ret = new _Data();
    ret.deserialize(response.getData());
    return ret.getValue();
  }
  public void f2(List<byte[]> dl) { 
    //serialize dl
    SerializableDataList serializableDataList = new SerializableDataList();
serializableDataList.setDataList(dl);
byte[] serializedDl = serializableDataList.serialize();

    //make request
    Request request = new Request();
    request.setServiceId(3041265512L);
    request.setMethodId(1601027192L);
    request.setArgumentCount((byte) 1);
    request.setType(Request.RequestType.InvokeStateless);
    Argument arg0 = new Argument();
    arg0.setDataLength(serializedDl.length);
    arg0.setData(serializedDl);
    request.addArgument(arg0);
    int dataLength = 0;
    //calculate data length for every argument
    // calulate dlDataLength
    int dlDataLength= serializedDl.length;
    int dlDataLengthByteArrayLength = 1;
    if (dlDataLength >= 0x80) {
      if (dlDataLength <= 0xff) {
        //ex 0x81 0xff
        dlDataLengthByteArrayLength = 2;
      } else if (dlDataLength <= 0xffff) {
        //ex 0x82 0xff 0xff
        dlDataLengthByteArrayLength = 3;
      } else if (dlDataLength <= 0xffffff) {
        //ex 0x83 0xff 0xff 0xff
        dlDataLengthByteArrayLength = 4;
      }
    }
    dataLength += dlDataLength + dlDataLengthByteArrayLength;
    // arg count(1) + request type(1) + method ID(4) + service ID(4) = 10;
    request.setLength(10 + dataLength);
    // connect to server
    TcpClient tcpClient = TcpClientFactory.create();
    try{
      tcpClient.connect(host, port);
    } catch (TcpClientConnectException e) {
      throw new HottentotRuntimeException(e);
    }
    // serialize request according to HTNP
    Protocol protocol = ProtocolFactory.create();
    byte[] serializedRequest = protocol.serializeRequest(request);
    // send request
    try {
      tcpClient.write(serializedRequest);
    } catch (TcpClientWriteException e) {
      throw new HottentotRuntimeException(e);
    }
  }
  public void f3(List<String> ls) { 
    //serialize ls
    SerializableStringList serializableStringList = new SerializableStringList();
serializableStringList.setStringList(ls);
byte[] serializedLs = serializableStringList.serialize();

    //make request
    Request request = new Request();
    request.setServiceId(3041265512L);
    request.setMethodId(3326818639L);
    request.setArgumentCount((byte) 1);
    request.setType(Request.RequestType.InvokeStateless);
    Argument arg0 = new Argument();
    arg0.setDataLength(serializedLs.length);
    arg0.setData(serializedLs);
    request.addArgument(arg0);
    int dataLength = 0;
    //calculate data length for every argument
    // calulate lsDataLength
    int lsDataLength= serializedLs.length;
    int lsDataLengthByteArrayLength = 1;
    if (lsDataLength >= 0x80) {
      if (lsDataLength <= 0xff) {
        //ex 0x81 0xff
        lsDataLengthByteArrayLength = 2;
      } else if (lsDataLength <= 0xffff) {
        //ex 0x82 0xff 0xff
        lsDataLengthByteArrayLength = 3;
      } else if (lsDataLength <= 0xffffff) {
        //ex 0x83 0xff 0xff 0xff
        lsDataLengthByteArrayLength = 4;
      }
    }
    dataLength += lsDataLength + lsDataLengthByteArrayLength;
    // arg count(1) + request type(1) + method ID(4) + service ID(4) = 10;
    request.setLength(10 + dataLength);
    // connect to server
    TcpClient tcpClient = TcpClientFactory.create();
    try{
      tcpClient.connect(host, port);
    } catch (TcpClientConnectException e) {
      throw new HottentotRuntimeException(e);
    }
    // serialize request according to HTNP
    Protocol protocol = ProtocolFactory.create();
    byte[] serializedRequest = protocol.serializeRequest(request);
    // send request
    try {
      tcpClient.write(serializedRequest);
    } catch (TcpClientWriteException e) {
      throw new HottentotRuntimeException(e);
    }
  }

  public void destroy() {
    //TODO
  }
}

/******************************************************************
 * Generated by Hottentot JAVA Generator
 * Date:
 * Name:
 * Description:
 ******************************************************************/
package [%BASE_PACKAGE_NAME%].hotgen;

import ir.ntnaeem.hottentot.serializerHelper.DataLengthByteArrayMaker;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import ir.ntnaeem.hottentot.serializerHelper.ByteArrayToInteger;
import ir.ntnaeem.hottentot.type.*;

public class Serializable[%UPPER_CASE_STRUCT_NAME%]List {

  private List<[%JAVA_CLASS_TYPE%]> [%LOWER_CASE_STRUCT_NAME%]List;

  public Serializable[%UPPER_CASE_STRUCT_NAME%]List() {
    [%LOWER_CASE_STRUCT_NAME%]List = new ArrayList<[%JAVA_CLASS_TYPE%]>();
  }

  public List<[%JAVA_CLASS_TYPE%]> get[%UPPER_CASE_STRUCT_NAME%]List() {
    return [%LOWER_CASE_STRUCT_NAME%]List;
  }

  public void set[%UPPER_CASE_STRUCT_NAME%]List(List<[%JAVA_CLASS_TYPE%]> [%LOWER_CASE_STRUCT_NAME%]List) {
    this.[%LOWER_CASE_STRUCT_NAME%]List = [%LOWER_CASE_STRUCT_NAME%]List;
  }

  public byte[] serialize() {
    if ([%LOWER_CASE_STRUCT_NAME%]List.size() != 0) {
      int counter = 0;
      int dataLength = 0;
      //calculate serialized[%STRUCT_NAME%]ListLength
      for ([%JAVA_CLASS_TYPE%] [%LOWER_CASE_STRUCT_NAME%] : [%LOWER_CASE_STRUCT_NAME%]List) {
        [%INSTANCIATION_HOTTENTOT_TYPE%]
        byte[] serialized[%UPPER_CASE_STRUCT_NAME%] = [%LOWER_CASE_HOTTENTOT_TYPE%].serialize();
        byte[] [%LOWER_CASE_STRUCT_NAME%]LengthByteArray =
          DataLengthByteArrayMaker.getByteArray(serialized[%UPPER_CASE_STRUCT_NAME%].length);
        dataLength += [%LOWER_CASE_STRUCT_NAME%]LengthByteArray.length + serialized[%UPPER_CASE_STRUCT_NAME%].length;
      }
      byte[] serialized[%UPPER_CASE_STRUCT_NAME%]List = new byte[dataLength];
      for ([%JAVA_CLASS_TYPE%] [%LOWER_CASE_STRUCT_NAME%] : [%LOWER_CASE_STRUCT_NAME%]List) {
        [%INSTANCIATION_HOTTENTOT_TYPE%]
        byte[] serialized[%UPPER_CASE_STRUCT_NAME%] = [%LOWER_CASE_HOTTENTOT_TYPE%].serialize();
        int serialized[%UPPER_CASE_STRUCT_NAME%]Length = serialized[%UPPER_CASE_STRUCT_NAME%].length;
        byte[] [%LOWER_CASE_STRUCT_NAME%]LengthByteArray =
          DataLengthByteArrayMaker.getByteArray(serialized[%UPPER_CASE_STRUCT_NAME%]Length);
        System.arraycopy([%LOWER_CASE_STRUCT_NAME%]LengthByteArray, 0, serialized[%UPPER_CASE_STRUCT_NAME%]List, counter, [%LOWER_CASE_STRUCT_NAME%]LengthByteArray.length);
        counter += [%LOWER_CASE_STRUCT_NAME%]LengthByteArray.length;
        System.arraycopy(serialized[%UPPER_CASE_STRUCT_NAME%], 0, serialized[%UPPER_CASE_STRUCT_NAME%]List, counter, serialized[%UPPER_CASE_STRUCT_NAME%].length);
        counter += serialized[%UPPER_CASE_STRUCT_NAME%].length;
      }
      return serialized[%UPPER_CASE_STRUCT_NAME%]List;
    }
    return new byte[0];
  }

  public void deserialize(byte[] serialized[%UPPER_CASE_STRUCT_NAME%]List) {
    if(serialized[%UPPER_CASE_STRUCT_NAME%]List.length != 0){
      int counter = 0;
      int serialized[%UPPER_CASE_STRUCT_NAME%]ByteArrayLength = 0 ;
      while (true) {
        if (counter == serialized[%UPPER_CASE_STRUCT_NAME%]List.length) {
          break;
        }
        int firstLengthByte = serialized[%UPPER_CASE_STRUCT_NAME%]List[counter];
        int numOfByteForLength = 1;
        if ((firstLengthByte & 0x80) == 0) {
          serialized[%UPPER_CASE_STRUCT_NAME%]ByteArrayLength = serialized[%UPPER_CASE_STRUCT_NAME%]List[counter];
        } else {
          counter++;
          numOfByteForLength = firstLengthByte & 0x0f;
          byte[] serialized[%UPPER_CASE_STRUCT_NAME%]LengthByteArray = new byte[numOfByteForLength];
          int serializedDataWrapperLengthByteArrayCounter = 0;
          for (int i = counter; i < counter + numOfByteForLength; i++) {
            serialized[%UPPER_CASE_STRUCT_NAME%]LengthByteArray[serializedDataWrapperLengthByteArrayCounter++] = serialized[%UPPER_CASE_STRUCT_NAME%]List[i];
          }
          serialized[%UPPER_CASE_STRUCT_NAME%]ByteArrayLength = ByteArrayToInteger.getInt(serialized[%UPPER_CASE_STRUCT_NAME%]LengthByteArray);
        }
        counter += numOfByteForLength;
        byte[] [%LOWER_CASE_STRUCT_NAME%]ByteArray = new byte[serialized[%UPPER_CASE_STRUCT_NAME%]ByteArrayLength];
        int [%LOWER_CASE_STRUCT_NAME%]ByteArrayCounter = 0;
        for (int i = counter; i < counter + serialized[%UPPER_CASE_STRUCT_NAME%]ByteArrayLength; i++) {
          [%LOWER_CASE_STRUCT_NAME%]ByteArray[[%LOWER_CASE_STRUCT_NAME%]ByteArrayCounter++] = serialized[%UPPER_CASE_STRUCT_NAME%]List[i];
        }
        counter += serialized[%UPPER_CASE_STRUCT_NAME%]ByteArrayLength;
        [%HOTTENTOT_TYPE%] [%LOWER_CASE_HOTTENTOT_TYPE%] = new [%HOTTENTOT_TYPE%]();
        [%LOWER_CASE_HOTTENTOT_TYPE%].deserialize([%LOWER_CASE_STRUCT_NAME%]ByteArray);
        [%LOWER_CASE_STRUCT_NAME%]List.add([%LOWER_CASE_HOTTENTOT_TYPE%][%GET_VALUE_METHOD%]);
      }
    }
  }
}
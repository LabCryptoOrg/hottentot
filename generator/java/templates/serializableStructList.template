
/******************************************************************
 * Generated by Hottentot JAVA Generator
 * Date: 
 * Name: 
 * Description:
 *   
 ******************************************************************/
package package [%BASE_PACKAGE_NAME%];

import ir.ntnaeem.hottentot.serializerHelper.DataLengthByteArrayMaker;
import java.nio.ByteBuffer;
import java.util.ArrayList;
import java.util.List;

public class Serializable[%STRUCT_NAME%]List {

  private List<[%STRUCT_NAME%]> [%LOWER_CASE_STRCUT_NAME%]List;

  public Serializable[%STRUCT_NAME%]List() {
    [%LOWER_CASE_STRCUT_NAME%]List = new ArrayList<[%STRUCT_NAME%]>();
  }

  public List<[%STRUCT_NAME%]> get[%STRUCT_NAME%]List() {
    return [%LOWER_CASE_STRCUT_NAME%]List;
  }

  public void set[%STRUCT_NAME%]List(List<[%STRUCT_NAME%]> [%LOWER_CASE_STRCUT_NAME%]List) {
    [%LOWER_CASE_STRCUT_NAME%]List = [%LOWER_CASE_STRCUT_NAME%]List;
  }

  public byte[] serialize() {
    if ([%LOWER_CASE_STRCUT_NAME%]List.size() != 0) {
      int serialized[%STRUCT_NAME%]Length = [%LOWER_CASE_STRCUT_NAME%]List.get(0).serialize().length;
      byte[] [%LOWER_CASE_STRCUT_NAME%]LengthByteArray = 
      DataLengthByteArrayMaker.getByteArray(serialized[%STRUCT_NAME%]Length);
      byte[] serializedTokenList = new byte[tokenLengthByteArray.length + serializedTokenLength * tokenList.size()];
      System.arraycopy(tokenLengthByteArray, 0, serializedTokenList, 0, tokenLengthByteArray.length);
      int counter = tokenLengthByteArray.length ;
      for (Token token : tokenList) {
        byte[] serializedToken = token.serialize();
        System.arraycopy(serializedToken, 0, serializedTokenList, counter, serializedToken.length);
        counter += serializedToken.length;
      }
      return serializedTokenList;
    }
    return new byte[0];
  }

  public void deserialize(byte[] serializedTokenList) {

    if (serializedTokenList.length != 0) {

      int firstByte = serializedTokenList[0];
      int serializedTokenLength;
      int numOfByteForLength = 1;
      if ((firstByte & 0x80) == 0) {
        serializedTokenLength = serializedTokenList[0];
      } else {
        numOfByteForLength = firstByte & 0x0f;
        byte[] serializedTokenLengthByteArray = new byte[numOfByteForLength];
        for (int i = 1; i <= numOfByteForLength; i++) {
          serializedTokenLengthByteArray[i - 1] = serializedTokenList[i];
        }
        serializedTokenLength = ByteBuffer.wrap(serializedTokenLengthByteArray).getInt();
      }
      //
      int counter = numOfByteForLength;
      byte[] tokenByteArray;
      while(true){
        if(counter == serializedTokenList.length){
          break;
        }
        tokenByteArray = new byte[serializedTokenLength];
        int tokenByteArrayCounter = 0;
        for(int i = counter ; i < counter + serializedTokenLength ; i++){
          tokenByteArray[tokenByteArrayCounter++] = serializedTokenList[i];
        }
        counter += serializedTokenLength;
        Token token = new Token();
        token.deserialize(tokenByteArray);
        tokenList.add(token);
      }
    }
  }
}
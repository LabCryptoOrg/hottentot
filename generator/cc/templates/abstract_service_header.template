/******************************************************************
 * Generated by Hottentot CC Generator
 * Date: [[[GENERATION_DATE]]]
 * Name: [[[FILENAME]]]
 * Description:
 *   This file contains definition of an abstract service class.
 ******************************************************************/

#ifndef [[[HEADER_GUARD]]]
#define [[[HEADER_GUARD]]]

#ifdef _MSC_VER
typedef __int8 int8_t;
typedef unsigned __int8 uint8_t;
typedef __int16 int16_t;
typedef unsigned __int16 uint16_t;
typedef __int32 int32_t;
typedef unsigned __int32 uint32_t;
typedef __int64 int64_t;
typedef unsigned __int64 uint64_t;
#else
#include <stdint.h>
#endif

#include <string>

#include <naeem/hottentot/runtime/service/service.h>

[[[INCLUDE_STRUCT_HEADERS]]]

#include "[[[SNAKE_CASE_SERVICE_NAME]]].h"
#include "[[[SNAKE_CASE_SERVICE_NAME]]]_request_handler.h"
#include "../enums.h"


[[[NAMESPACES_START]]]
namespace service {
[[[INDENT]]]class Abstract[[[CAMEL_CASE_FC_SERVICE_NAME]]] : public [[[CAMEL_CASE_FC_SERVICE_NAME]]], public ::naeem::hottentot::runtime::service::Service {
[[[INDENT]]]public:
[[[INDENT]]][[[INDENT]]]Abstract[[[CAMEL_CASE_FC_SERVICE_NAME]]]() {}
[[[INDENT]]][[[INDENT]]]virtual ~Abstract[[[CAMEL_CASE_FC_SERVICE_NAME]]]() {}
[[[INDENT]]]public:
[[[INDENT]]][[[INDENT]]]inline virtual uint32_t GetServiceId() const {
[[[INDENT]]][[[INDENT]]][[[INDENT]]]return [[[SERVICE_HASH]]];
[[[INDENT]]][[[INDENT]]]}
[[[INDENT]]]protected:
[[[INDENT]]][[[INDENT]]]inline virtual ::naeem::hottentot::runtime::service::RequestHandler* MakeRequestHandler() {
[[[INDENT]]][[[INDENT]]][[[INDENT]]]return new [[[CAMEL_CASE_FC_SERVICE_NAME]]]RequestHandler(this);
[[[INDENT]]][[[INDENT]]]}
[[[INDENT]]]};
} // END OF NAMESPACE service
[[[NAMESPACES_END]]]

#endif
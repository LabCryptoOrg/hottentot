[[[RETURN_TYPE]]]*
[[[SERIVCE_PROXY_CLASS_NAME]]]::[[[METHOD_NAME]]]([[[ARGUMENTS]]]) {
  /*
   * Make request object
   */
  ::naeem::hottentot::runtime::Logger::GetOut() << "Making request object ..." << std::endl;
  ::naeem::hottentot::runtime::Request request;
  request.SetServiceId([[[SERVICE_HASH]]]);
  request.SetMethodId([[[METHOD_HASH]]]);
  request.SetArgumentCount([[[ARGUMENTS]]]);
  request.SetType(::naeem::hottentot::runtime::Request::InvokeStateless);
  /*
   * Serialize arguments
   */
  [[[ARGUMENTS_SERIALIZATION]]]
  ::naeem::hottentot::runtime::Logger::GetOut() << "Request object is fill." << std::endl;
  /*
   * Connect to server
   */
  ::naeem::hottentot::runtime::Logger::GetOut() << "Connecting to server " << host_ << ":" << port_ << " ..." << std::endl;
  ::naeem::hottentot::runtime::proxy::TcpClient *tcpClient = 
    ::naeem::hottentot::runtime::proxy::ProxyRuntime::GetTcpClientFactory()->CreateTcpClient(host_,
                                                                                             port_);
  tcpClient->Connect();
  ::naeem::hottentot::runtime::Logger::GetOut() << "Connected." << std::endl;
  /*
   * Serialize request according to HOTP
   */
  ::naeem::hottentot::runtime::Protocol *protocol = 
    new ::naeem::hottentot::runtime::ProtocolV1(tcpClient->GetRemoteSocketFD()); // TODO(kamran): Use factory.
  uint32_t requestSerializedDataLength = 0;
  ::naeem::hottentot::runtime::Logger::GetOut() << "Serializing request object ..." << std::endl;
  unsigned char *requestSerializedData = protocol->SerializeRequest(request, 
                                                                    &requestSerializedDataLength);
  ::naeem::hottentot::runtime::Logger::GetOut() << "Request object is serialized." << std::endl;
  /*
   * Send request byte array
   */
  uint32_t sendLength = (requestSerializedDataLength > 127 ? 3 : 1) + requestSerializedDataLength;
  unsigned char *sendData = new unsigned char[sendLength];
  uint32_t c = 0;
  if (requestSerializedDataLength > 127) {
    sendData[c++] = 0x82;
    sendData[c++] = requestSerializedDataLength / 256;
    sendData[c++] = requestSerializedDataLength % 256;
  } else {
    sendData[c++] = requestSerializedDataLength;
  }
  for (uint32_t i = 0; i < requestSerializedDataLength; i++) {
    sendData[c++] = requestSerializedData[i];
  }
  ::naeem::hottentot::runtime::Logger::GetOut() << "Writing " << sendLength << "  Bytes to socket ..." << std::endl;
  ::naeem::hottentot::runtime::Utils::PrintArray("To Write", 
                                                 sendData, 
                                                 sendLength);
  tcpClient->Write(sendData, 
                   sendLength);
  ::naeem::hottentot::runtime::Logger::GetOut() << "Written." << std::endl;
  delete sendData;
  delete requestSerializedData;
  /*
   * Read response from server
   */
  ::naeem::hottentot::runtime::Logger::GetOut() << "Waiting for response ..." << std::endl;
  unsigned char buffer[256];
  while (!protocol->IsResponseComplete()) {
    int numOfReadBytes = tcpClient->Read(buffer, 256);
    protocol->ProcessDataForResponse(buffer, numOfReadBytes);
  }
  /*
   * Deserialize token
   */
  [[[RETURN_TYPE]]] *returnObject = new [[[RETURN_TYPE]]];
  ::naeem::hottentot::runtime::Utils::PrintArray("Response", 
                                                 protocol->GetResponse()->GetData(), 
                                                 protocol->GetResponse()->GetDataLength());
  returnObject->Deserialize(protocol->GetResponse()->GetData(), 
                            protocol->GetResponse()->GetDataLength());
  /*
   * Finalization
   */
  tcpClient->Close();
  delete serializedData;
  delete protocol;
  delete tcpClient;
  /*
   * Return the acquired token
   */
  return returnObject;
}
/******************************************************************
 * Generated by Hottentot CC Generator
 * Date: [[[GENERATION_DATE]]]
 * Name: [[[FILENAME]]]
 * Description:
 *   This file contains a sample client.
 ******************************************************************/

#include <iostream>

#include <org/labcrypto/hottentot/runtime/configuration.h>
#include <org/labcrypto/hottentot/runtime/logger.h>
#include <org/labcrypto/hottentot/runtime/utils.h>
#include <org/labcrypto/hottentot/runtime/proxy/proxy_runtime.h>

[[[INCLUDE_STRUCT_HEADERS]]]
#include "../proxy/[[[SNAKE_CASE_SERVICE_NAME]]].h"
#include "../proxy/[[[SNAKE_CASE_SERVICE_NAME]]]_proxy_builder.h"


int 
main(int argc, char **argv) {
[[[INDENT]]]try {
[[[INDENT]]][[[INDENT]]]::org::labcrypto::hottentot::runtime::Logger::Init();  
[[[INDENT]]][[[INDENT]]]::org::labcrypto::hottentot::runtime::proxy::ProxyRuntime::Init(argc, argv);
[[[INDENT]]][[[INDENT]]]if (::org::labcrypto::hottentot::runtime::Configuration::Verbose()) {
[[[INDENT]]][[[INDENT]]][[[INDENT]]]::org::labcrypto::hottentot::runtime::Logger::GetOut() << 
[[[INDENT]]][[[INDENT]]][[[INDENT]]][[[INDENT]]]"[" << ::org::labcrypto::hottentot::runtime::Utils::GetCurrentUTCTimeString() << "]: " << 
[[[INDENT]]][[[INDENT]]][[[INDENT]]][[[INDENT]]][[[INDENT]]]"Proxy runtime is initialized." << std::endl;
[[[INDENT]]][[[INDENT]]]}
[[[INDENT]]][[[INDENT]]][[[NAMESPACE]]]::proxy::[[[CAMEL_CASE_FC_SERVICE_NAME]]] *proxy = 
[[[INDENT]]][[[INDENT]]][[[INDENT]]][[[NAMESPACE]]]::proxy::[[[CAMEL_CASE_FC_SERVICE_NAME]]]ProxyBuilder::Create("127.0.0.1", 2000);
[[[INDENT]]][[[INDENT]]]if (::org::labcrypto::hottentot::runtime::Configuration::Verbose()) {
[[[INDENT]]][[[INDENT]]][[[INDENT]]]::org::labcrypto::hottentot::runtime::Logger::GetOut() << 
[[[INDENT]]][[[INDENT]]][[[INDENT]]][[[INDENT]]]"[" << ::org::labcrypto::hottentot::runtime::Utils::GetCurrentUTCTimeString() << "]: " << 
[[[INDENT]]][[[INDENT]]][[[INDENT]]][[[INDENT]]][[[INDENT]]]"Proxy object is created." << std::endl;
[[[INDENT]]][[[INDENT]]]}
[[[INDENT]]][[[INDENT]]]try {
[[[INDENT]]][[[INDENT]]][[[INDENT]]]// ====================================================
[[[INDENT]]][[[INDENT]]][[[INDENT]]]// TODO: Do whatever you want with proxy objects.
[[[INDENT]]][[[INDENT]]][[[INDENT]]]// TODO: Delete allocated objects
[[[INDENT]]][[[INDENT]]][[[INDENT]]]// ====================================================
[[[INDENT]]][[[INDENT]]]} catch (std::runtime_error &e) {
[[[INDENT]]][[[INDENT]]][[[INDENT]]]::org::labcrypto::hottentot::runtime::Logger::GetError() << 
[[[INDENT]]][[[INDENT]]][[[INDENT]]][[[INDENT]]]"[" << ::org::labcrypto::hottentot::runtime::Utils::GetCurrentUTCTimeString() << "]: " << 
[[[INDENT]]][[[INDENT]]][[[INDENT]]][[[INDENT]]][[[INDENT]]]e.what() << std::endl;
[[[INDENT]]][[[INDENT]]]}
[[[INDENT]]][[[INDENT]]][[[NAMESPACE]]]::proxy::[[[CAMEL_CASE_FC_SERVICE_NAME]]]ProxyBuilder::Destroy(proxy);
[[[INDENT]]][[[INDENT]]]if (::org::labcrypto::hottentot::runtime::Configuration::Verbose()) {
[[[INDENT]]][[[INDENT]]][[[INDENT]]]::org::labcrypto::hottentot::runtime::Logger::GetOut() << 
[[[INDENT]]][[[INDENT]]][[[INDENT]]][[[INDENT]]]"[" << ::org::labcrypto::hottentot::runtime::Utils::GetCurrentUTCTimeString() << "]: " <<
[[[INDENT]]][[[INDENT]]][[[INDENT]]][[[INDENT]]][[[INDENT]]]"Proxy object is destroyed." << std::endl;
[[[INDENT]]][[[INDENT]]]}
[[[INDENT]]][[[INDENT]]]::org::labcrypto::hottentot::runtime::proxy::ProxyRuntime::Shutdown();
[[[INDENT]]][[[INDENT]]]if (::org::labcrypto::hottentot::runtime::Configuration::Verbose()) {
[[[INDENT]]][[[INDENT]]][[[INDENT]]]::org::labcrypto::hottentot::runtime::Logger::GetOut() << 
[[[INDENT]]][[[INDENT]]][[[INDENT]]][[[INDENT]]]"[" << ::org::labcrypto::hottentot::runtime::Utils::GetCurrentUTCTimeString() << "]: " <<
[[[INDENT]]][[[INDENT]]][[[INDENT]]][[[INDENT]]][[[INDENT]]]"Proxy runtime is shutdown." << std::endl;
[[[INDENT]]][[[INDENT]]]}
[[[INDENT]]][[[INDENT]]]::org::labcrypto::hottentot::runtime::Logger::Shutdown();  
[[[INDENT]]]} catch (std::exception &e) {
[[[INDENT]]][[[INDENT]]]::org::labcrypto::hottentot::runtime::proxy::ProxyRuntime::Shutdown();
[[[INDENT]]][[[INDENT]]]if (::org::labcrypto::hottentot::runtime::Configuration::Verbose()) {
[[[INDENT]]][[[INDENT]]][[[INDENT]]]::org::labcrypto::hottentot::runtime::Logger::GetOut() << 
[[[INDENT]]][[[INDENT]]][[[INDENT]]][[[INDENT]]]"[" << ::org::labcrypto::hottentot::runtime::Utils::GetCurrentUTCTimeString() << "]: " <<
[[[INDENT]]][[[INDENT]]][[[INDENT]]][[[INDENT]]][[[INDENT]]]"Proxy runtime is shutdown." << std::endl;
[[[INDENT]]][[[INDENT]]]}
[[[INDENT]]][[[INDENT]]]::org::labcrypto::hottentot::runtime::Logger::Shutdown();  
[[[INDENT]]][[[INDENT]]]::org::labcrypto::hottentot::runtime::Logger::GetError() << 
[[[INDENT]]][[[INDENT]]][[[INDENT]]][[[INDENT]]]"[" << ::org::labcrypto::hottentot::runtime::Utils::GetCurrentUTCTimeString() << "]: " <<
[[[INDENT]]][[[INDENT]]][[[INDENT]]][[[INDENT]]][[[INDENT]]]e.what() << std::endl;
[[[INDENT]]][[[INDENT]]]return 1;
[[[INDENT]]]} catch (...) {
[[[INDENT]]][[[INDENT]]]::org::labcrypto::hottentot::runtime::proxy::ProxyRuntime::Shutdown();
[[[INDENT]]][[[INDENT]]]if (::org::labcrypto::hottentot::runtime::Configuration::Verbose()) {
[[[INDENT]]][[[INDENT]]][[[INDENT]]]::org::labcrypto::hottentot::runtime::Logger::GetOut() << 
[[[INDENT]]][[[INDENT]]][[[INDENT]]][[[INDENT]]]"[" << ::org::labcrypto::hottentot::runtime::Utils::GetCurrentUTCTimeString() << "]: " <<
[[[INDENT]]][[[INDENT]]][[[INDENT]]][[[INDENT]]][[[INDENT]]]"Proxy runtime is shutdown." << std::endl;
[[[INDENT]]][[[INDENT]]]}
[[[INDENT]]][[[INDENT]]]::org::labcrypto::hottentot::runtime::Logger::Shutdown();  
[[[INDENT]]][[[INDENT]]]::org::labcrypto::hottentot::runtime::Logger::GetError() << 
[[[INDENT]]][[[INDENT]]][[[INDENT]]][[[INDENT]]]"[" << ::org::labcrypto::hottentot::runtime::Utils::GetCurrentUTCTimeString() << "]: " << [[[INDENT]]][[[INDENT]]][[[INDENT]]][[[INDENT]]][[[INDENT]]]"Error." << std::endl;
[[[INDENT]]][[[INDENT]]]return 1;
[[[INDENT]]]}
[[[INDENT]]]return 0;
}

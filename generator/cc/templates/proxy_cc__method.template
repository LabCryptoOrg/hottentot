[[[INDENT]]]void
[[[INDENT]]][[[CAMEL_CASE_FC_SERVICE_NAME]]]Proxy::[[[METHOD_NAME]]](
[[[ARGUMENTS]]][[[INDENT]]]) {
[[[INDENT]]][[[INDENT]]]/*
[[[INDENT]]][[[INDENT]]] * Make request object
[[[INDENT]]][[[INDENT]]] */
[[[INDENT]]][[[INDENT]]]if (::org::labcrypto::hottentot::runtime::Configuration::Verbose()) {
[[[INDENT]]][[[INDENT]]][[[INDENT]]]::org::labcrypto::hottentot::runtime::Logger::GetOut() << 
[[[INDENT]]][[[INDENT]]][[[INDENT]]][[[INDENT]]]"[" << ::org::labcrypto::hottentot::runtime::Utils::GetCurrentUTCTimeString() << "]: " <<
[[[INDENT]]][[[INDENT]]][[[INDENT]]][[[INDENT]]][[[INDENT]]]"Making request object ..." << std::endl;
[[[INDENT]]][[[INDENT]]]}
[[[INDENT]]][[[INDENT]]]::org::labcrypto::hottentot::runtime::RequestV1 *request =
[[[INDENT]]][[[INDENT]]][[[INDENT]]]new ::org::labcrypto::hottentot::runtime::RequestV1;
[[[INDENT]]][[[INDENT]]]request->SetServiceId([[[SERVICE_HASH]]]);
[[[INDENT]]][[[INDENT]]]request->SetMethodId([[[METHOD_HASH]]]);
[[[INDENT]]][[[INDENT]]]request->SetType(::org::labcrypto::hottentot::runtime::RequestV1::InvokeStateless);
[[[INDENT]]][[[INDENT]]]/*
[[[INDENT]]][[[INDENT]]] * Serialize arguments
[[[INDENT]]][[[INDENT]]] */
[[[ARGUMENTS_SERIALIZATION]]][[[INDENT]]][[[INDENT]]]if (::org::labcrypto::hottentot::runtime::Configuration::Verbose()) {
[[[INDENT]]][[[INDENT]]][[[INDENT]]]::org::labcrypto::hottentot::runtime::Logger::GetOut() << 
[[[INDENT]]][[[INDENT]]][[[INDENT]]][[[INDENT]]]"[" << ::org::labcrypto::hottentot::runtime::Utils::GetCurrentUTCTimeString() << "]: " <<
[[[INDENT]]][[[INDENT]]][[[INDENT]]][[[INDENT]]][[[INDENT]]]"Request object is fill with serialized arguments." << std::endl;
[[[INDENT]]][[[INDENT]]]}
[[[INDENT]]][[[INDENT]]]/*
[[[INDENT]]][[[INDENT]]] * Connect to server
[[[INDENT]]][[[INDENT]]] */
[[[INDENT]]][[[INDENT]]]if (::org::labcrypto::hottentot::runtime::Configuration::Verbose()) {
[[[INDENT]]][[[INDENT]]][[[INDENT]]]::org::labcrypto::hottentot::runtime::Logger::GetOut() << 
[[[INDENT]]][[[INDENT]]][[[INDENT]]][[[INDENT]]]"[" << ::org::labcrypto::hottentot::runtime::Utils::GetCurrentUTCTimeString() << "]: " <<
[[[INDENT]]][[[INDENT]]][[[INDENT]]][[[INDENT]]][[[INDENT]]]"Connecting to server " << host_ << ":" << port_ << " ..." << std::endl;
[[[INDENT]]][[[INDENT]]]}
[[[INDENT]]][[[INDENT]]]::org::labcrypto::hottentot::runtime::proxy::ServiceConnector *serviceConnector =
[[[INDENT]]][[[INDENT]]][[[INDENT]]]::org::labcrypto::hottentot::runtime::proxy::ProxyRuntime::GetServiceConnectorFactory()->
[[[INDENT]]][[[INDENT]]][[[INDENT]]][[[INDENT]]]CreateTcpServiceConnector(host_, port_, NULL);
[[[INDENT]]][[[INDENT]]]::org::labcrypto::hottentot::runtime::proxy::ServiceConnectCallback *serviceConnectCallback =
[[[INDENT]]][[[INDENT]]][[[INDENT]]]::org::labcrypto::hottentot::runtime::proxy::ProxyRuntime::GetServiceConnectCallbackFactory()->Create(serviceConnector, request);
[[[INDENT]]][[[INDENT]]]serviceConnector->SetServiceConnectCallback(serviceConnectCallback);
[[[INDENT]]][[[INDENT]]]if (!serviceConnector->Connect()) {
[[[INDENT]]][[[INDENT]]][[[INDENT]]]delete serviceConnector;
[[[INDENT]]][[[INDENT]]][[[INDENT]]]throw std::runtime_error("[" + ::org::labcrypto::hottentot::runtime::Utils::GetCurrentUTCTimeString() + "]: Could not connect.");
[[[INDENT]]][[[INDENT]]]}
[[[INDENT]]][[[INDENT]]]if (::org::labcrypto::hottentot::runtime::Configuration::Verbose()) {
[[[INDENT]]][[[INDENT]]][[[INDENT]]]::org::labcrypto::hottentot::runtime::Logger::GetOut() << 
[[[INDENT]]][[[INDENT]]][[[INDENT]]][[[INDENT]]]"[" << ::org::labcrypto::hottentot::runtime::Utils::GetCurrentUTCTimeString() << "]: " <<
[[[INDENT]]][[[INDENT]]][[[INDENT]]][[[INDENT]]][[[INDENT]]]"Connect request is sent." << std::endl;
[[[INDENT]]][[[INDENT]]]}
[[[INDENT]]][[[INDENT]]]::org::labcrypto::hottentot::runtime::ResponseV1 *responseV1 = 
[[[INDENT]]][[[INDENT]]][[[INDENT]]](::org::labcrypto::hottentot::runtime::ResponseV1 *)
[[[INDENT]]][[[INDENT]]][[[INDENT]]]::org::labcrypto::hottentot::runtime::proxy::ProxyRuntime::GetResponse(request->GetId());
[[[INDENT]]][[[INDENT]]]if (::org::labcrypto::hottentot::runtime::Configuration::Verbose()) {
[[[INDENT]]][[[INDENT]]][[[INDENT]]]::org::labcrypto::hottentot::runtime::Utils::PrintArray (
[[[INDENT]]][[[INDENT]]][[[INDENT]]][[[INDENT]]]"Response", 
[[[INDENT]]][[[INDENT]]][[[INDENT]]][[[INDENT]]]responseV1->GetData(), 
[[[INDENT]]][[[INDENT]]][[[INDENT]]][[[INDENT]]]responseV1->GetDataLength()
[[[INDENT]]][[[INDENT]]][[[INDENT]]]);
[[[INDENT]]][[[INDENT]]]}
[[[INDENT]]][[[INDENT]]]out.Deserialize (
[[[INDENT]]][[[INDENT]]][[[INDENT]]]responseV1->GetData(), 
[[[INDENT]]][[[INDENT]]][[[INDENT]]]responseV1->GetDataLength()
[[[INDENT]]][[[INDENT]]]);
[[[INDENT]]]}
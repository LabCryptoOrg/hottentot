[[[INDENT]]]void
[[[INDENT]]][[[CAMEL_CASE_FC_SERVICE_NAME]]]Proxy::[[[METHOD_NAME]]]([[[ARGUMENTS]]]) {
[[[INDENT]]][[[INDENT]]]/*
[[[INDENT]]][[[INDENT]]] * Make request object
[[[INDENT]]][[[INDENT]]] */
[[[INDENT]]][[[INDENT]]]if (::naeem::hottentot::runtime::Configuration::Verbose()) {
[[[INDENT]]][[[INDENT]]][[[INDENT]]]::naeem::hottentot::runtime::Logger::GetOut() << "Making request object ..." << std::endl;
[[[INDENT]]][[[INDENT]]]}
[[[INDENT]]][[[INDENT]]]::naeem::hottentot::runtime::Request request;
[[[INDENT]]][[[INDENT]]]request.SetServiceId([[[SERVICE_HASH]]]);
[[[INDENT]]][[[INDENT]]]request.SetMethodId([[[METHOD_HASH]]]);
[[[INDENT]]][[[INDENT]]]request.SetType(::naeem::hottentot::runtime::Request::InvokeStateless);
[[[INDENT]]][[[INDENT]]]/*
[[[INDENT]]][[[INDENT]]] * Serialize arguments
[[[INDENT]]][[[INDENT]]] */
[[[INDENT]]][[[INDENT]]]uint32_t serializedDataLength = 0;
[[[INDENT]]][[[INDENT]]]unsigned char *serializedData = 0;
[[[ARGUMENTS_SERIALIZATION]]][[[INDENT]]][[[INDENT]]]if (::naeem::hottentot::runtime::Configuration::Verbose()) {
[[[INDENT]]][[[INDENT]]][[[INDENT]]]::naeem::hottentot::runtime::Logger::GetOut() << "Request object is fill with serialized arguments." << std::endl;
[[[INDENT]]][[[INDENT]]]}
[[[INDENT]]][[[INDENT]]]/*
[[[INDENT]]][[[INDENT]]] * Connect to server
[[[INDENT]]][[[INDENT]]] */
[[[INDENT]]][[[INDENT]]]if (::naeem::hottentot::runtime::Configuration::Verbose()) {
[[[INDENT]]][[[INDENT]]][[[INDENT]]]::naeem::hottentot::runtime::Logger::GetOut() << "Connecting to server " << host_ << ":" << port_ << " ..." << std::endl;
[[[INDENT]]][[[INDENT]]]}
[[[INDENT]]][[[INDENT]]]::naeem::hottentot::runtime::proxy::TcpClient *tcpClient = 
[[[INDENT]]][[[INDENT]]][[[INDENT]]][[[INDENT]]]::naeem::hottentot::runtime::proxy::ProxyRuntime::GetTcpClientFactory()->CreateTcpClient(host_, port_);
[[[INDENT]]][[[INDENT]]]if (!tcpClient->Connect()) { throw std::runtime_error("Could not connect.");}
[[[INDENT]]][[[INDENT]]]if (::naeem::hottentot::runtime::Configuration::Verbose()) {
[[[INDENT]]][[[INDENT]]][[[INDENT]]]::naeem::hottentot::runtime::Logger::GetOut() << "Connected." << std::endl;
[[[INDENT]]][[[INDENT]]]}
[[[INDENT]]][[[INDENT]]]/*
[[[INDENT]]][[[INDENT]]] * Serialize request according to HOTP
[[[INDENT]]][[[INDENT]]] */
[[[INDENT]]][[[INDENT]]]::naeem::hottentot::runtime::Protocol *protocol = new ::naeem::hottentot::runtime::ProtocolV1(tcpClient->GetRemoteSocketFD()); // TODO(kamran): Use factory.
[[[INDENT]]][[[INDENT]]]uint32_t requestSerializedDataLength = 0;
[[[INDENT]]][[[INDENT]]]if (::naeem::hottentot::runtime::Configuration::Verbose()) {
[[[INDENT]]][[[INDENT]]][[[INDENT]]]::naeem::hottentot::runtime::Logger::GetOut() << "Serializing request object ..." << std::endl;
[[[INDENT]]][[[INDENT]]]}
[[[INDENT]]][[[INDENT]]]unsigned char *requestSerializedData = protocol->SerializeRequest(request, &requestSerializedDataLength);
[[[INDENT]]][[[INDENT]]]if (::naeem::hottentot::runtime::Configuration::Verbose()) {
[[[INDENT]]][[[INDENT]]][[[INDENT]]]::naeem::hottentot::runtime::Logger::GetOut() << "Request object is serialized." << std::endl;
[[[INDENT]]][[[INDENT]]]}
[[[INDENT]]][[[INDENT]]]/*
[[[INDENT]]][[[INDENT]]] * Send request byte array
[[[INDENT]]][[[INDENT]]] */
[[[INDENT]]][[[INDENT]]]uint32_t sendLength = 0;
[[[INDENT]]][[[INDENT]]]if (requestSerializedDataLength < 128) {
[[[INDENT]]][[[INDENT]]][[[INDENT]]]sendLength = 1 + requestSerializedDataLength;
[[[INDENT]]][[[INDENT]]]} else if (requestSerializedDataLength < 256) {
[[[INDENT]]][[[INDENT]]][[[INDENT]]]sendLength = 2 + requestSerializedDataLength;
[[[INDENT]]][[[INDENT]]]} else if (requestSerializedDataLength < 256 * 256) {
[[[INDENT]]][[[INDENT]]][[[INDENT]]]sendLength = 3 + requestSerializedDataLength;
[[[INDENT]]][[[INDENT]]]} else if (requestSerializedDataLength < 256 * 256 * 256) {
[[[INDENT]]][[[INDENT]]][[[INDENT]]]sendLength = 4 + requestSerializedDataLength;
[[[INDENT]]][[[INDENT]]]}
[[[INDENT]]][[[INDENT]]]unsigned char *sendData = new unsigned char[sendLength];
[[[INDENT]]][[[INDENT]]]uint32_t c = 0;
[[[INDENT]]][[[INDENT]]]if (requestSerializedDataLength < 128) {
[[[INDENT]]][[[INDENT]]][[[INDENT]]]sendData[c++] = requestSerializedDataLength;
[[[INDENT]]][[[INDENT]]]} else if (requestSerializedDataLength < 256) {
[[[INDENT]]][[[INDENT]]][[[INDENT]]]sendData[c++] = 0x81;
[[[INDENT]]][[[INDENT]]][[[INDENT]]]sendData[c++] = requestSerializedDataLength;
[[[INDENT]]][[[INDENT]]]} else if (requestSerializedDataLength < 256 * 256) {
[[[INDENT]]][[[INDENT]]][[[INDENT]]]sendData[c++] = 0x82;
[[[INDENT]]][[[INDENT]]][[[INDENT]]]sendData[c++] = requestSerializedDataLength / 256;
[[[INDENT]]][[[INDENT]]][[[INDENT]]]sendData[c++] = requestSerializedDataLength % 256;
[[[INDENT]]][[[INDENT]]]} else if (requestSerializedDataLength < 256 * 256 * 256) {
[[[INDENT]]][[[INDENT]]][[[INDENT]]]sendData[c] = 0x83;
[[[INDENT]]][[[INDENT]]][[[INDENT]]]sendData[c + 1] = requestSerializedDataLength / (256 * 256);
[[[INDENT]]][[[INDENT]]][[[INDENT]]]sendData[c + 2] = (requestSerializedDataLength - sendData[c + 1] * 256 * 256) / 256;
[[[INDENT]]][[[INDENT]]][[[INDENT]]]sendData[c + 3] = requestSerializedDataLength % (256 * 256);
[[[INDENT]]][[[INDENT]]][[[INDENT]]]c += 4;
[[[INDENT]]][[[INDENT]]]}
[[[INDENT]]][[[INDENT]]]for (uint32_t i = 0; i < requestSerializedDataLength; i++) {
[[[INDENT]]][[[INDENT]]][[[INDENT]]]sendData[c++] = requestSerializedData[i];
[[[INDENT]]][[[INDENT]]]}
[[[INDENT]]][[[INDENT]]]if (::naeem::hottentot::runtime::Configuration::Verbose()) {
[[[INDENT]]][[[INDENT]]][[[INDENT]]]::naeem::hottentot::runtime::Logger::GetOut() << "Writing " << sendLength << "[[[INDENT]]][[[INDENT]]]Bytes to socket ..." << std::endl;
[[[INDENT]]][[[INDENT]]][[[INDENT]]]::naeem::hottentot::runtime::Utils::PrintArray("To Write", sendData, sendLength);
[[[INDENT]]][[[INDENT]]]}
[[[INDENT]]][[[INDENT]]]tcpClient->Write(sendData, sendLength);
[[[INDENT]]][[[INDENT]]]if (::naeem::hottentot::runtime::Configuration::Verbose()) {
[[[INDENT]]][[[INDENT]]][[[INDENT]]]::naeem::hottentot::runtime::Logger::GetOut() << "Written." << std::endl;
[[[INDENT]]][[[INDENT]]]}
[[[INDENT]]][[[INDENT]]]delete [] sendData;
[[[INDENT]]][[[INDENT]]]delete [] requestSerializedData;
[[[INDENT]]][[[INDENT]]]/*
[[[INDENT]]][[[INDENT]]] * Read response from server
[[[INDENT]]][[[INDENT]]] */
[[[INDENT]]][[[INDENT]]]if (::naeem::hottentot::runtime::Configuration::Verbose()) {
[[[INDENT]]][[[INDENT]]][[[INDENT]]]::naeem::hottentot::runtime::Logger::GetOut() << "Waiting for response ..." << std::endl;
[[[INDENT]]][[[INDENT]]]}
[[[INDENT]]][[[INDENT]]]unsigned char buffer[256];
[[[INDENT]]][[[INDENT]]]while (!protocol->IsResponseComplete()) {
[[[INDENT]]][[[INDENT]]][[[INDENT]]]int numOfReadBytes = tcpClient->Read(buffer, 256);
[[[INDENT]]][[[INDENT]]][[[INDENT]]]protocol->ProcessDataForResponse(buffer, numOfReadBytes);
[[[INDENT]]][[[INDENT]]]}
[[[RESPONSE_DESERIALIZATION]]][[[INDENT]]][[[INDENT]]]/*
[[[INDENT]]][[[INDENT]]] * Finalization
[[[INDENT]]][[[INDENT]]] */
[[[INDENT]]][[[INDENT]]]tcpClient->Close();
[[[INDENT]]][[[INDENT]]]// delete serializedData;
[[[INDENT]]][[[INDENT]]]delete protocol;
[[[INDENT]]][[[INDENT]]]delete tcpClient;
[[[INDENT]]]}
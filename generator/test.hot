/*  The MIT License (MIT)
 *
 *  Copyright (c) 2015 LabCrypto Org.
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *  
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *  
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 */
module ir.ntnaeem.services {
  enum GenderType {
    1 = Male;
    2 = Female;
  };
  enum SampleEnumType {
    0 = None;
    1 = Sample_Item_With_Underscore;
  };
  struct Person {
    set<string> names ord(1);
    list<int> sum ord(2);
    double x ord(3);
    string str ord(4);
  };
  // Test2
  stateful service PersonAuthenticator {
    string GetName(int age, double percent);
    list<string> GetNames(string predicate);
    list<map<set<list<string>>, Phone>> GetG();
  };
  /*
   This is me
   */
  struct Phone {
    bool /* Another comment */ done ord(1);
    Person p ord(2);
    map<string, Phone> phones ord(3);
  };
  stateless service PhoneManager {
    map<Person, list<Phone>> GetPhonebook();
    void AddEntry(Person person, Phone phone, date d);
    map<list<Person>, string> FFF(string abc);
  };
};
module org.apache.tests {
  stateless service ApacheLicenseManager {
    set<License> GetThem();
    map<list<Person>, asdasdaasdasdsda> GetMap(list<string> names, set<map<list<int>, string>> s);
  };
  struct License {
    int version ord(1);
    map<int, list<string>> l ord(2);
  };
};
